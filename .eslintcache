[{"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\index.js":"1","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\App.js":"2","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\serviceWorker.js":"3","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\store.js":"4","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\reducers.js":"5","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\helpers\\fake-backend.js":"6","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\sagas.js":"7","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\routes\\index.js":"8","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\routes\\routes.js":"9","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\chat\\reducers.js":"10","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\auth\\reducers.js":"11","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\auth\\saga.js":"12","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\layout\\reducer.js":"13","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\layouts\\NonAuth.js":"14","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\layouts\\AuthLayout\\index.js":"15","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\chat\\constants.js":"16","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\helpers\\authUtils.js":"17","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\auth\\constants.js":"18","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\helpers\\apiClient.js":"19","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\helpers\\firebase.js":"20","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\layout\\constants.js":"21","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\auth\\actions.js":"22","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\Auth\\Logout.js":"23","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\index.js":"24","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\Auth\\Login.js":"25","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\Auth\\ForgetPassword.js":"26","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\Auth\\LockScreen.js":"27","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\Auth\\Register.js":"28","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\StarterPage\\index.js":"29","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\layouts\\AuthLayout\\LeftSidebarMenu.js":"30","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\config.js":"31","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\actions.js":"32","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\ChatLeftSidebar.js":"33","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\i18n.js":"34","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\UserChat\\index.js":"35","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\layout\\actions.js":"36","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\chat\\actions.js":"37","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\Tabs\\Profile.js":"38","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\Tabs\\Groups.js":"39","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\Tabs\\Contacts.js":"40","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\Tabs\\Chats.js":"41","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\Tabs\\Settings.js":"42","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\UserChat\\ImageList.js":"43","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\UserChat\\UserHead.js":"44","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\UserChat\\ChatInput.js":"45","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\UserChat\\FileList.js":"46","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\components\\UserProfileSidebar.js":"47","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\components\\SelectContact.js":"48","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\components\\CustomCollapse.js":"49","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\Tabs\\OnlineUsers.js":"50","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\components\\AttachedFiles.js":"51","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\WelcomePage.js":"52","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\RegPage.js":"53","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\AuthPage.js":"54","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\components\\MyInput.js":"55","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\chat\\saga.js":"56"},{"size":586,"mtime":1596614920000,"results":"57","hashOfConfig":"58"},{"size":835,"mtime":1621539086005,"results":"59","hashOfConfig":"58"},{"size":5086,"mtime":1595242964000,"results":"60","hashOfConfig":"58"},{"size":604,"mtime":1592658466000,"results":"61","hashOfConfig":"58"},{"size":221,"mtime":1597331410000,"results":"62","hashOfConfig":"58"},{"size":2049,"mtime":1597392340000,"results":"63","hashOfConfig":"58"},{"size":372,"mtime":1623788626066,"results":"64","hashOfConfig":"58"},{"size":1862,"mtime":1621784575627,"results":"65","hashOfConfig":"58"},{"size":1646,"mtime":1622841609180,"results":"66","hashOfConfig":"58"},{"size":19583,"mtime":1623100611789,"results":"67","hashOfConfig":"58"},{"size":1511,"mtime":1623358327897,"results":"68","hashOfConfig":"58"},{"size":6066,"mtime":1623358614197,"results":"69","hashOfConfig":"58"},{"size":976,"mtime":1622384165683,"results":"70","hashOfConfig":"58"},{"size":764,"mtime":1615369024000,"results":"71","hashOfConfig":"58"},{"size":1221,"mtime":1615369028000,"results":"72","hashOfConfig":"58"},{"size":481,"mtime":1622937126751,"results":"73","hashOfConfig":"58"},{"size":980,"mtime":1597645622000,"results":"74","hashOfConfig":"58"},{"size":497,"mtime":1623102457527,"results":"75","hashOfConfig":"58"},{"size":1495,"mtime":1592658466000,"results":"76","hashOfConfig":"58"},{"size":3201,"mtime":1622934611182,"results":"77","hashOfConfig":"58"},{"size":325,"mtime":1622380149782,"results":"78","hashOfConfig":"58"},{"size":1263,"mtime":1623105881316,"results":"79","hashOfConfig":"58"},{"size":466,"mtime":1595235576000,"results":"80","hashOfConfig":"58"},{"size":4346,"mtime":1623788771302,"results":"81","hashOfConfig":"58"},{"size":8277,"mtime":1611989440000,"results":"82","hashOfConfig":"58"},{"size":6104,"mtime":1611989420000,"results":"83","hashOfConfig":"58"},{"size":5276,"mtime":1611823748000,"results":"84","hashOfConfig":"58"},{"size":9973,"mtime":1611989430000,"results":"85","hashOfConfig":"58"},{"size":170,"mtime":1596722170000,"results":"86","hashOfConfig":"58"},{"size":12361,"mtime":1623695198525,"results":"87","hashOfConfig":"58"},{"size":107,"mtime":1615360738000,"results":"88","hashOfConfig":"58"},{"size":97,"mtime":1597331416000,"results":"89","hashOfConfig":"58"},{"size":2359,"mtime":1611754188000,"results":"90","hashOfConfig":"58"},{"size":1188,"mtime":1597822166000,"results":"91","hashOfConfig":"58"},{"size":30210,"mtime":1623692020398,"results":"92","hashOfConfig":"58"},{"size":633,"mtime":1622383475291,"results":"93","hashOfConfig":"58"},{"size":1035,"mtime":1622937126748,"results":"94","hashOfConfig":"58"},{"size":7672,"mtime":1623694280864,"results":"95","hashOfConfig":"58"},{"size":13996,"mtime":1623694245226,"results":"96","hashOfConfig":"58"},{"size":8640,"mtime":1622903000894,"results":"97","hashOfConfig":"58"},{"size":12148,"mtime":1623693588250,"results":"98","hashOfConfig":"58"},{"size":19595,"mtime":1623694296738,"results":"99","hashOfConfig":"58"},{"size":5918,"mtime":1623789776452,"results":"100","hashOfConfig":"58"},{"size":13091,"mtime":1623695319882,"results":"101","hashOfConfig":"58"},{"size":6392,"mtime":1623690778286,"results":"102","hashOfConfig":"58"},{"size":3257,"mtime":1623785123186,"results":"103","hashOfConfig":"58"},{"size":12400,"mtime":1623695456414,"results":"104","hashOfConfig":"58"},{"size":3318,"mtime":1611988534000,"results":"105","hashOfConfig":"58"},{"size":1291,"mtime":1611819884000,"results":"106","hashOfConfig":"58"},{"size":5020,"mtime":1623694656447,"results":"107","hashOfConfig":"58"},{"size":2902,"mtime":1611820838000,"results":"108","hashOfConfig":"58"},{"size":1670,"mtime":1623048656159,"results":"109","hashOfConfig":"58"},{"size":4871,"mtime":1623355253844,"results":"110","hashOfConfig":"58"},{"size":2545,"mtime":1623791931961,"results":"111","hashOfConfig":"58"},{"size":685,"mtime":1621079901617,"results":"112","hashOfConfig":"58"},{"size":1247,"mtime":1622926731205,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"10uhwth",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"116"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"116"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"116"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"116"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"116"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"116"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"116"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"116"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"116"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"116"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"116"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"116"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214","usedDeprecatedRules":"116"},{"filePath":"215","messages":"216","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"217"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"116"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"116"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"116"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"116"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"116"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"116"},"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\index.js",[],["248","249"],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\App.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\serviceWorker.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\store.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\reducers.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\helpers\\fake-backend.js",[],["250","251"],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\sagas.js",["252","253"],"import { all } from 'redux-saga/effects';\nimport authSaga from './auth/saga';\nimport chatSaga from \"./chat/saga\";\nimport firebase from \"firebase\";\nimport {getFirebaseBackend} from \"../helpers/firebase\";\n\n// const timeout = 1_800_800\n// const timeout = 15000\n\nexport default function* rootSaga(getState) {\n\n    yield all([\n        authSaga(),\n        chatSaga(),\n    ]);\n}\n","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\routes\\index.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\routes\\routes.js",["254","255","256"],"import React from \"react\";\nimport { Redirect, Link } from \"react-router-dom\";\n\n// lazy load all the views\nconst Dashboard = React.lazy(() => import(\"../pages/dashboard/index\"));\n// import Dashboard from \"../pages/dashboard/index\";\nconst StarterPage = React.lazy(() => import(\"../pages/StarterPage/index\"));\n\n// auth\nconst Login = React.lazy(() => import(\"../pages/Auth/Login\"));\nconst Logout = React.lazy(() => import(\"../pages/Auth/Logout\"));\nconst ForgetPassword = React.lazy(() => import(\"../pages/Auth/ForgetPassword\"));\nconst Register = React.lazy(() => import(\"../pages/Auth/Register\"));\nconst LockScreen = React.lazy(() => import(\"../pages/Auth/LockScreen\"));\n\n// My pages\nconst WelcomePage = React.lazy(() => import(\"../pages/WelcomePage\"));\nconst AuthPage = React.lazy(() => import(\"../pages/AuthPage\"));\nconst RegPage = React.lazy(() => import(\"../pages/RegPage\"));\n\n// declare all routes\nconst authProtectedRoutes = [\n  { path: \"/dashboard\", component: Dashboard },\n  { path: \"/pages-starter\", component: StarterPage },\n\n  {\n    path: \"/\",\n    exact: true,\n    component: () => <Redirect to=\"/dashboard\"/>,\n  },\n];\n\nconst publicRoutes = [\n  { path: \"/logout\", component: Logout },\n  // { path: \"/login\", component: Login },\n  { path: \"/login\", component: AuthPage},\n  { path: \"/registration\", component: RegPage},\n  { path: \"/forget-password\", component: ForgetPassword },\n  // { path: \"/register\", component: Register },\n  { path: \"/lock-screen\", component: LockScreen},\n  { path: \"/welcome\", component: WelcomePage},\n];\n\nconst routes = [...authProtectedRoutes, ...publicRoutes];\n\nexport { authProtectedRoutes, publicRoutes, routes};\n","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\chat\\reducers.js",["257","258","259","260","261","262","263","264","265","266"],"import {\n    CHAT_USER,\n    ACTIVE_USER,\n    FULL_USER,\n    ADD_LOGGED_USER,\n    CREATE_GROUP,\n    HIDE_CHAT,\n    SHOW_CHAT,\n    ADD_CONTACT,\n    ADD_NEW_CHAT_USER, ADD_MESSAGE, RELOAD_USERS\n} from './constants';\n\n\n//Import Images\nimport avatar2 from \"../../assets/images/users/avatar-2.jpg\";\nimport avatar4 from \"../../assets/images/users/avatar-4.jpg\";\nimport avatar3 from \"../../assets/images/users/avatar-3.jpg\";\nimport avatar6 from \"../../assets/images/users/avatar-6.jpg\";\nimport avatar7 from \"../../assets/images/users/avatar-7.jpg\";\nimport avatar8 from \"../../assets/images/users/avatar-8.jpg\";\nimport img6 from \"../../assets/images/small/img-6.jpg\";\nimport img4 from \"../../assets/images/small/img-4.jpg\";\nimport img7 from \"../../assets/images/small/img-7.jpg\";\n\nconst INIT_STATE = {\n\tactive_user : 0,\n    displayChat: false,\n    // users: [\n    //     //admin is sender and user in receiver\n    //     { id : 0, name : \"Patrick Hendricks\", profilePicture : avatar2, status : \"online\", unRead : 0, roomType : \"contact\", isGroup: false,\n    //         messages: [\n    //             { id: 1, message: \"hi\", time: \"01:05\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id: 2, message: \"hi patrick\", time: \"10.00\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //             { id: 3, message: \"how's going on your project?\", time: \"01:05\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id: 4, message: \"Do you need any help?\", time: \"01:06\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id : 33, isToday : true },\n    //             { id: 5, message: \"Let me know?\", time: \"01:06\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id: 6, message: \"hi...Good Morning!\", time: \"09:05\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //             { id: 7, message: \"image\", time: \"10:30\", userType: \"receiver\", isImageMessage : true, isFileMessage : false, imageMessage : [ { image : img4 }, { image : img7 } ] },\n    //             { id: 8, message: \"please, save this pictures to your file and give it to me after you have done with editing!\", time: \"10:31\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id: 9, message: \"Окей, хорошо😄👍\", time: \"02:50\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //     ] },\n    //     { id : 1, name : \"Mark Messer\", profilePicture : avatar3, status : \"away\",unRead : 2, isGroup: false,\n    //         messages: [\n    //             { id : 33, isToday : true },\n    //             { id: 1, message: \"Привет\", time: \"10.00\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //             { id: 2, message: \"Вот фото\", time: \"10:30\", userType: \"receiver\", isImageMessage : true, isFileMessage : false, imageMessage : [ { image : img4 }, { image : img7 } ] },\n    //         ]  },\n    //     { id : 13, name : \"General\", profilePicture : \"Null\", unRead : 0, isGroup: true,\n    //         messages: [\n    //             { id : 33, isToday : true },\n    //             { id : 1, userName : \"John Smith\",  message: \"Hello send project images\", time: \"12:00\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id : 2, userName : \"Steve Walker\",  message: \"Images\", time: \"12:05\", userType: \"receiver\", isImageMessage : true, isFileMessage : false, imageMessage : [ { image : img6 } ] },\n    //             { id : 3, userName : \"admin\",  message: \"Good Afternoon everyone !\", time: \"2:05\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //             { id : 4, userName : \"Galen Rizo\",  message: \"This theme is Awesome!\", time: \"2:06\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //         ]  },\n    //\n    //     { id : 4, name : \"Doris Brown\", profilePicture : avatar4, status : \"online\",unRead : 0, isGroup: false, isTyping : true,\n    //         messages: [\n    //             { id : 1, userName : \"Doris Brown\",  message: \"Good Morning\", time: \"10:00\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id : 2, userName : \"admin\",  message: \"Good morning, How are you? What about our next meeting?\", time: \"10:02\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //             { id : 33, isToday : true },\n    //             { id: 3, message: \"Yeah everything is fine\", time: \"10:05\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id: 4, message: \"& Next meeting tomorrow 10.00AM\", time: \"10:05\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id: 5, message: \"Wow that's great\", time: \"10:06\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //             { id: 6, message: \"images\", time: \"10:30\", userType: \"receiver\", isImageMessage : true, isFileMessage : false, imageMessage : [ { image : img4 }, { image : img7 } ] },\n    //             { id: 7, userName : \"admin\",  message: \"Files\", time: \"01:30\", userType: \"sender\", isImageMessage : false, isFileMessage : true, fileMessage: \"admin_v1.0.zip\", size : \"12.5 MB\" },\n    //             { id: 8, message: \"\", time: \"10:05\", userType: \"receiver\", isImageMessage : false, isFileMessage : false, isTyping : true },\n    //         ]  },\n    //     { id : 5, name : \"Designer\", profilePicture : \"Null\",unRead : 1,  isGroup: true,\n    //         messages: [\n    //             { id : 1, userName : \"Doris Brown\",  message: \"Hello send project images\", time: \"12:00\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id : 33, isToday : true },\n    //             { id : 2, userName : \"Steve Walker\",  message: \"Images\", time: \"12:05\", userType: \"receiver\", isImageMessage : true, isFileMessage : false, imageMessage : [ { image : img6 } ] },\n    //             { id : 3, userName : \"admin\",  message: \"Images\", time: \"01:30\", userType: \"sender\", isImageMessage : false, isFileMessage : true, fileMessage: \"Minible-Vertical.zip\" },\n    //             { id : 4, userName : \"admin\", message: \"@Doris Brown please review this code, and give me feedback asap\", time: \"01:31\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //             { id : 5, userName : \"John Howard\",  message: \"Good Afternoon everyone !\", time: \"2:00\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id : 6, userName : \"admin\",  message: \"Good Afternoon everyone !\", time: \"2:05\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //             { id : 9, userName : \"John Howard\",  message: \"Увидимся в 10\", time: \"2:10\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //         ]  },\n    //\n    //     { id : 6, name : \"Steve Walker\", profilePicture : avatar6, status : \"away\", unRead : 0,  isGroup: false,\n    //         messages: [\n    //             { id : 33, isToday : true },\n    //             { id : 1, message : \"file\", time : \"01:16\", userType : \"receiver\", isImageMessage : false, isFileMessage : true, fileMessage: \"Minible-Vertical.zip\" },\n    //             { id : 2, message : \"Окей 👍, я проверю  отвечу тебе позже\", time : \"01:16\", userType : \"sender\", isImageMessage : false, isFileMessage : false }\n    //         ]  },\n    //\n    //     { id : 7, name : \"Albert Rodarte\", profilePicture : \"Null\", status : \"online\", unRead : 0, isGroup: false, isTyping : true,\n    //         messages: [\n    //             { id : 33, isToday : true },\n    //             { id: 1, message: \"hi\", time: \"01:05\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id: 2, message: \"Hello, how can i help you\", time: \"01:05\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //             { id: 3, message: \"\", time: \"01:05\", userType: \"receiver\", isImageMessage : false, isFileMessage : false, isTyping : true },\n    //         ]  },\n    //\n    //     { id : 8, name : \"Mirta George\", profilePicture : \"Null\", status : \"online\", unRead : 0,  isGroup: false,\n    //         messages: [\n    //             { id : 33, isToday : true },\n    //             { id: 1, message: \"hi...Good Morning!\", time: \"09:05\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id: 2, message: \"image\", time: \"10:30\", userType: \"sender\", isImageMessage : true, isFileMessage : false, imageMessage : [ { image : img4 }, { image : img7 } ] },\n    //             { id: 3, message: \"please, save this pictures to your file and give it to me after you have done with editing!\", time: \"10:31\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //             { id: 4, message: \"Хорошо, буду ждать👍\", time: \"02:50\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //         ]  },\n    //\n    //     { id : 9, name : \"Paul Haynes\", profilePicture : avatar7, status : \"away\", unRead : 0, isGroup: false,\n    //         messages: [\n    //             { id : 33, isToday : true },\n    //             { id: 1, message: \"hi...Good Morning!\", time: \"09:05\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //             { id: 2, message: \"image\", time: \"10:30\", userType: \"receiver\", isImageMessage : true, isFileMessage : false, imageMessage : [ { image : img4 }, { image : img7 } ] },\n    //             { id: 3, message: \"please, save this pictures to your file and give it to me after you have done with editing!\", time: \"10:31\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id: 4, message: \"Доброе утро😄\", time: \"02:50\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //         ]  },\n    //\n    //     { id : 2, name : \"Jonathan Miller\", profilePicture : avatar2, status : \"online\",unRead : 0, isGroup: false,\n    //         messages: [\n    //             { id : 33, isToday : true },\n    //             { id: 1, message: \"hello Admin\", time: \"08:00\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id: 2, message: \"Good morning\", time: \"08:00\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //             { id: 3, message: \"is everything is fine ?\", time: \"08:00\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id: 4, message: \"i can help you😊\", time: \"08:00\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //             { id: 5, message: \"Hi, How are You?\", time: \"08:00\", userType: \"receiver\", isImageMessage : false, isFileMessage : false },\n    //         ]  },\n    //\n    //     { id : 3, name : \"Ossie Wilson\", profilePicture : avatar3, status : \"away\",unRead : 0, isGroup: false,\n    //         messages: [\n    //             { id : 33, isToday : true },\n    //             { id: 1, message: \"hi\", time: \"12:00\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //             { id: 2, message: \"Did you finished it?\", time: \"12:00\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //             { id: 2, message: \"I've finished it! See you so\", time: \"12:05\", userType: \"receiver\", isImageMessage : true, isFileMessage : false, imageMessage : [ { image : img6 } ] }\n    //         ]  },\n    //\n    //      { id : 14, name : \"Sara Muller\", profilePicture : \"Null\", status : \"offline\",unRead : 0, isGroup: false,\n    //         messages: [\n    //             { id : 33, isToday : true },\n    //             { id: 1, message: \"hi yana\", time: \"12:00\", userType: \"sender\", isImageMessage : false, isFileMessage : false },\n    //             { id: 2, message: \"image\", time: \"12:05\", userType: \"receiver\", isImageMessage : true, isFileMessage : false, imageMessage : [ { image : img6 } ] },\n    //             { id: 3, message: \"Wow that's great\", time: \"12:00\", userType: \"sender\", isImageMessage : false, isFileMessage : false }\n    //         ]  },\n    // ],\n    users: [],\n    // groups : [\n    //     { gourpId : 1, name : \"#General\", profilePicture : \"Null\", isGroup : true, unRead : 0, desc : \"General Group\",\n    //         members : [\n    //             { userId : 1, name : \"Sara Muller\", profilePicture : \"Null\", role : null },\n    //             { userId : 2, name : \"Ossie Wilson\", profilePicture : avatar8, role : \"admin\" },\n    //             { userId : 3, name : \"Jonathan Miller\", profilePicture : \"Null\", role : null },\n    //             { userId : 4, name : \"Paul Haynes\", profilePicture : avatar7, role : null },\n    //             { userId : 5, name : \"Yana sha\", profilePicture : avatar3, role : null },\n    //             { userId : 6, name : \"Steve Walker\", profilePicture : avatar6, role : null },\n    //         ]\n    //     },\n    //     { gourpId : 2, name : \"#Reporting\", profilePicture : \"Null\", isGroup : true, unRead : 23,  desc : \"reporing Group here...\",\n    //         members : [\n    //             { userId : 1, name : \"Sara Muller\", profilePicture : \"Null\", role : null },\n    //             { userId : 2, name : \"Ossie Wilson\", profilePicture : avatar8, role : \"admin\" },\n    //             { userId : 3, name : \"Jonathan Miller\", profilePicture : \"Null\", role : null },\n    //             { userId : 4, name : \"Paul Haynes\", profilePicture : avatar7, role : null },\n    //             { userId : 5, name : \"Yana sha\", profilePicture : avatar3, role : null },\n    //             { userId : 6, name : \"Steve Walker\", profilePicture : avatar6, role : null },\n    //         ]\n    //     },\n    //     { gourpId : 3, name : \"#Designer\", profilePicture : \"Null\", isGroup : true, unRead : 0, isNew : true, desc : \"designers Group\",\n    //         members : [\n    //             { userId : 1, name : \"Sara Muller\", profilePicture : \"Null\", role : null },\n    //             { userId : 2, name : \"Ossie Wilson\", profilePicture : avatar8, role : \"admin\" },\n    //             { userId : 3, name : \"Jonathan Miller\", profilePicture : \"Null\", role : null },\n    //             { userId : 4, name : \"Paul Haynes\", profilePicture : avatar7, role : null },\n    //             { userId : 5, name : \"Yana sha\", profilePicture : avatar3, role : null },\n    //             { userId : 6, name : \"Steve Walker\", profilePicture : avatar6, role : null },\n    //         ]\n    //     },\n    //     { gourpId : 4, name : \"#Developers\", profilePicture : \"Null\", isGroup : true, unRead : 0,  desc : \"developers Group\",\n    //         members : [\n    //             { userId : 1, name : \"Sara Muller\", profilePicture : \"Null\", role : null },\n    //             { userId : 2, name : \"Ossie Wilson\", profilePicture : avatar8, role : \"admin\" },\n    //             { userId : 3, name : \"Jonathan Miller\", profilePicture : \"Null\", role : null },\n    //             { userId : 4, name : \"Paul Haynes\", profilePicture : avatar7, role : null },\n    //             { userId : 5, name : \"Yana sha\", profilePicture : avatar3, role : null },\n    //             { userId : 6, name : \"Steve Walker\", profilePicture : avatar6, role : null },\n    //         ]\n    //     },\n    //     { gourpId : 5, name : \"#Project-aplha\", profilePicture : \"Null\", isGroup : true, unRead : 0, isNew : true, desc : \"project related Group\",\n    //         members : [\n    //             { userId : 1, name : \"Sara Muller\", profilePicture : \"Null\", role : null },\n    //             { userId : 2, name : \"Ossie Wilson\", profilePicture : avatar8, role : \"admin\" },\n    //             { userId : 3, name : \"Jonathan Miller\", profilePicture : \"Null\", role : null },\n    //             { userId : 4, name : \"Paul Haynes\", profilePicture : avatar7, role : null },\n    //             { userId : 5, name : \"Yana sha\", profilePicture : avatar3, role : null },\n    //             { userId : 6, name : \"Steve Walker\", profilePicture : avatar6, role : null },\n    //         ]\n    //     },\n    //     { gourpId : 6, name : \"#Snacks\", profilePicture : \"Null\", isGroup : true, unRead : 0,  desc : \"snacks Group\",\n    //         members : [\n    //             { userId : 1, name : \"Sara Muller\", profilePicture : \"Null\", role : null },\n    //             { userId : 2, name : \"Ossie Wilson\", profilePicture : avatar8, role : \"admin\" },\n    //             { userId : 3, name : \"Jonathan Miller\", profilePicture : \"Null\", role : null },\n    //             { userId : 4, name : \"Paul Haynes\", profilePicture : avatar7, role : null },\n    //             { userId : 5, name : \"Yana sha\", profilePicture : avatar3, role : null },\n    //             { userId : 6, name : \"Steve Walker\", profilePicture : avatar6, role : null },\n    //         ]\n    //     },\n    // ],\n    groups: [],\n    // contacts : [\n    //     { id : 1, name : \"Albert Rodarte\" },\n    //     { id : 2, name : \"Allison Etter\" },\n    //     { id : 3, name : \"Craig Smiley\" },\n    //     { id : 4, name : \"Daniel Clay\" },\n    //     { id : 5, name : \"Doris Brown\" },\n    //     { id : 6, name : \"Iris Wells\" },\n    //     { id : 7, name : \"Juan Flakes\" },\n    //     { id : 8, name : \"John Hall\" },\n    //     { id : 9, name : \"Joy Southern\" },\n    //     { id : 10, name : \"Mary Farmer\" },\n    //     { id : 11, name : \"Mark Messer\" },\n    //     { id : 12, name : \"Michael Hinton\" },\n    //     { id : 13, name : \"Ossie Wilson\" },\n    //     { id : 14, name : \"Phillis Griffin\" },\n    //     { id : 15, name : \"Paul Haynes\" },\n    //     { id : 16, name : \"Rocky Jackson\" },\n    //     { id : 17, name : \"Sara Muller\" },\n    //     { id : 18, name : \"Simon Velez\" },\n    //     { id : 19, name : \"Steve Walker\" },\n    //     { id : 20, name : \"Hanah Mile\" },\n    // ]\n    contacts: []\n};\n\nconst Chat = (state = INIT_STATE, action) => {\n    switch (action.type) {\n        case CHAT_USER:\n            return { ...state };\n\n        case ACTIVE_USER:\n            return { \n            \t...state,\n                active_user : action.payload };\n                \n        case FULL_USER:\n            return { \n            \t...state,\n                users : action.payload };\n\n        case ADD_LOGGED_USER:\n            const newUser =  action.payload\n            return{\n                ...state, users : [\n                    ...state.users, newUser\n                ]\n            };\n\n        case CREATE_GROUP :\n            const newGroup =  action.payload\n            return {\n                ...state, groups : [\n                    ...state.groups, newGroup\n                ]\n            }\n\n        case HIDE_CHAT:\n            return { ...state, displayChat: false }\n        case SHOW_CHAT:\n            return { ...state, displayChat: true }\n\n        case ADD_CONTACT:\n            return { ...state, contacts: [ ...state.contacts, action.payload ] }\n        case ADD_NEW_CHAT_USER: {\n            const newUser = action.payload\n            return {\n                ...state, users: [\n                    ...state.users, newUser\n                    ]\n                }\n        }\n\n        case RELOAD_USERS: {\n            return {\n                ...state, users: action.payload\n            }\n        }\n            \n    default: return { ...state };\n    }\n}\n\nexport default Chat;","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\auth\\reducers.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\auth\\saga.js",["267","268","269"],"import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\r\n\r\nimport { APIClient } from '../../helpers/apiClient';\r\nimport { getFirebaseBackend } from \"../../helpers/firebase\";\r\n\r\n\r\nimport {\r\n    LOGIN_USER,\r\n    LOGOUT_USER,\r\n    REGISTER_USER,\r\n    FORGET_PASSWORD\r\n} from './constants';\r\n\r\n\r\nimport {\r\n    loginUserSuccess,\r\n    registerUserSuccess,\r\n    forgetPasswordSuccess,\r\n    apiError\r\n} from './actions';\r\nimport firebase from \"firebase\";\r\nimport {yellow} from \"@material-ui/core/colors\";\r\nimport {replace} from \"formik\";\r\nimport {setLoggedInUser} from \"../../helpers/authUtils\";\r\n\r\n\r\n//Initilize firebase\r\nconst fireBaseBackend = getFirebaseBackend();\r\n\r\n\r\n/**\r\n * Sets the session\r\n * @param {*} user \r\n */\r\n\r\nconst create = new APIClient().create;\r\n\r\n/**\r\n * Login the user\r\n * @param {*} payload - username and password \r\n */\r\nfunction* login({ payload: { username, password, history } }) {\r\n    try {\r\n        if (process.env.REACT_APP_DEFAULTAUTH === \"firebase\") {\r\n            const response = yield call(fireBaseBackend.loginUser, username, password);\r\n\r\n            const db = yield call(firebase.firestore)\r\n\r\n            const profileResponse = db.collection('users').doc(response['email'])\r\n            const data = yield call(async() => await profileResponse.get())\r\n            const profile = data.data().profile\r\n\r\n            const userData = {\r\n                uid: response.uid,\r\n                displayName: profile.displayName ? profile.displayName : \"Аноним\",\r\n                photoURL: profile.photoURL,\r\n                location: profile.location ? profile.location : \"Неизвестно\",\r\n                email: response.email,\r\n                phoneNumber: response.phoneNumber,\r\n                providerData: response.providerData,\r\n                apiKey: response.apiKey,\r\n                authDomain: response.authDomain,\r\n                status: 'online'\r\n            }\r\n\r\n            yield call(setLoggedInUser, userData)\r\n            yield call( async() => profileResponse.update({\r\n                'profile.status': 'online'\r\n            }))\r\n            yield put(loginUserSuccess(userData));\r\n        } else {\r\n            const response = yield call(create, '/login', { username, password });\r\n            localStorage.setItem(\"authUser\", JSON.stringify(response));\r\n            yield put(loginUserSuccess(response));\r\n        }\r\n        history.push('/dashboard');\r\n        window.location.href='/dashboard';\r\n    } catch (error) {\r\n        yield put(apiError(error));\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Logout the user\r\n * @param {*} param0 \r\n */\r\nfunction* logout({ payload: { history } }) {\r\n    try {\r\n        if (process.env.REACT_APP_DEFAULTAUTH === 'firebase') {\r\n            const authUser = yield call(() => getFirebaseBackend().getAuthenticatedUser())\r\n            const db = yield call(() => firebase.firestore())\r\n            const profile = db.collection('users').doc(authUser['email'])\r\n            yield call(fireBaseBackend.logout);\r\n\r\n            yield call( async () => await profile.update({\r\n                'profile.status': 'offline'\r\n            }) );\r\n            window.location.href = '/login';\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n}\r\n\r\n/**\r\n * Register the user\r\n */\r\nfunction* register({ payload: { user } }) {\r\n    try {\r\n        const email = user.email;\r\n        const password = user.password;\r\n        if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\"){\r\n\r\n            const db = yield call(firebase.firestore);\r\n            const newUserProfile = db.collection('users').doc(email);\r\n\r\n            const root = db.collection('root').doc('permission');\r\n            const data = yield call(async () => await root.get())\r\n            const allowEmails = data.data().allowEmails;\r\n\r\n            if (allowEmails.indexOf(email) === -1)\r\n            {\r\n                throw \"You haven't permission to register account.\"\r\n            }\r\n            else {\r\n                const response = yield call(fireBaseBackend.registerUser, email, password);\r\n                yield put(registerUserSuccess(response));\r\n\r\n                yield call(async () => await newUserProfile.set({\r\n                    chats: [],\r\n                    profile: {\r\n                        displayName: \"\",\r\n                        location: \"\",\r\n                        photoURL: \"\",\r\n                        status: \"offline\"\r\n                    },\r\n                    friends: []\r\n                }))\r\n            }\r\n\r\n        } else {\r\n            const response = yield call(create, '/register', user);\r\n            yield put(registerUserSuccess(response));\r\n        }\r\n        window.location.href='/login';\r\n        \r\n    } catch (error) {\r\n        yield put(apiError(error));\r\n    }\r\n}\r\n\r\n/**\r\n * forget password\r\n */\r\nfunction* forgetPassword({ payload: { email } }) {\r\n    try {\r\n        if(process.env.REACT_APP_DEFAULTAUTH === \"firebase\"){\r\n            const response = yield call(fireBaseBackend.forgetPassword, email);\r\n            if (response) {\r\n              yield put(\r\n                forgetPasswordSuccess(\r\n                  \"Reset link are sended to your mailbox, check there first\"\r\n                )\r\n              );\r\n            }\r\n        } else {\r\n            const response = yield call(create, '/forget-pwd', { email });\r\n            yield put(forgetPasswordSuccess(response));\r\n        }\r\n    } catch (error) {\r\n        yield put(apiError(error));\r\n    }\r\n}\r\n\r\n\r\nexport function* watchLoginUser() {\r\n    yield takeEvery(LOGIN_USER, login);\r\n}\r\n\r\nexport function* watchLogoutUser() {\r\n    yield takeEvery(LOGOUT_USER, logout);\r\n}\r\n\r\nexport function* watchRegisterUser() {\r\n    yield takeEvery(REGISTER_USER, register);\r\n}\r\n\r\nexport function* watchForgetPassword() {\r\n    yield takeEvery(FORGET_PASSWORD, forgetPassword);\r\n}\r\n\r\nfunction* authSaga() {\r\n    yield all([\r\n        fork(watchLoginUser),\r\n        fork(watchLogoutUser),\r\n        fork(watchRegisterUser),\r\n        fork(watchForgetPassword),\r\n    ]);\r\n}\r\n\r\nexport default authSaga;","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\layout\\reducer.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\layouts\\NonAuth.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\layouts\\AuthLayout\\index.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\chat\\constants.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\helpers\\authUtils.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\auth\\constants.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\helpers\\apiClient.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\helpers\\firebase.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\layout\\constants.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\auth\\actions.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\Auth\\Logout.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\index.js",["270","271","272","273","274","275","276","277","278","279","280"],"import React, {Component, useEffect, useState} from 'react';\r\n\r\nimport \"../../assets/scss/themes.scss\";\r\nimport \"../../assets/css/mycss/rewrite.css\";\r\n\r\n//Import Components\r\nimport ChatLeftSidebar from \"./ChatLeftSidebar\";\r\nimport UserChat from \"./UserChat/\";\r\n\r\nimport firebase from \"firebase\";\r\nimport {getFirebaseBackend} from \"../../helpers/firebase\";\r\n\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\nimport {activeUser, addContact, addLoggedinUser, createGroup, reloadUsers} from \"../../redux/chat/actions\";\r\nimport {dark} from \"@material-ui/core/styles/createPalette\";\r\nimport {editProfile} from \"../../redux/auth/actions\";\r\n\r\n\r\n// class Index extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {}\r\n//         this.db = firebase.database()\r\n//         this.dispatch = useDispatch()\r\n//     }\r\n//\r\n//     async componentDidMount() {\r\n//         try {\r\n//             this.db.ref(\"chats/users\").on(\"value\", value => {\r\n//                 value.forEach(user => {\r\n//                     users.push(user.val())\r\n//                 })\r\n//                 console.log(this.state)\r\n//             })\r\n//         }\r\n//         catch (error) {\r\n//             console.log(error)\r\n//         }\r\n//     }\r\n//\r\n//     render() {\r\n//\r\n//         return (\r\n//             <React.Fragment>\r\n//                 {/* chat left sidebar */}\r\n//                 <ChatLeftSidebar recentChatList={this.props.users} />\r\n//\r\n//                 {/* user chat */}\r\n//                 <UserChat recentChatList={this.props.users} />\r\n//\r\n//             </React.Fragment>\r\n//         );\r\n//     }\r\n// }\r\n\r\nconst Index = (props) => {\r\n\r\n    document.title = \"Orange | Мессенджер\";\r\n    const dispatch = useDispatch()\r\n    const db = firebase.firestore()\r\n    const authUser = getFirebaseBackend().getAuthenticatedUser()\r\n\r\n    const users = useSelector(state => state.Chat.users)\r\n    const userDoc = db.collection('users').doc(authUser['email'])\r\n    const activeUser = useSelector(state => state.Chat.active_user)\r\n    const displayChat = useSelector(state => state.Chat.displayChat)\r\n\r\n    useEffect(() => {\r\n        userDoc.onSnapshot(async(snapshot) => {\r\n\r\n            const chats = snapshot.data().chats\r\n\r\n            if (chats) {\r\n                const newChats = await Promise.all(chats.map(async(chat) => {\r\n\r\n                    const chatRef = db.collection('users').doc(chat.email)\r\n                    const chatData = await chatRef.get();\r\n                    const chatProfile = chatData.data().profile;\r\n\r\n                    return {...chat,\r\n                        profilePicture: chatProfile.photoURL ? chatProfile.photoURL : \"Null\",\r\n                        location: chatProfile.location ? chatProfile.location : \"Неизвестно\",\r\n                        status: chatProfile.status,\r\n                        name: chatProfile.displayName\r\n                    }\r\n                }))\r\n\r\n                dispatch(reloadUsers(newChats))\r\n\r\n                const userChat = document.getElementsByClassName('user-chat')\r\n                if (userChat[0])\r\n                    userChat[0].scrollTop = userChat[0].scrollHeight + 100;\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    useEffect(async() => {\r\n        const db = firebase.firestore();\r\n        const usersRef = db.collection('users');\r\n        const users = await usersRef.where('profile.displayName', '!=', '').get();\r\n\r\n        if (users.empty) return ;\r\n\r\n        users.forEach(user => {\r\n            if (user.id !== authUser.email && user.displayName !== 'Аноним') {\r\n                const newUser = user.data();\r\n                dispatch(createGroup({\r\n                    email: user.id,\r\n                    ...newUser.profile\r\n                }))\r\n            }\r\n        })\r\n    }, [])\r\n\r\n    return (\r\n      <React.Fragment>\r\n          {/* chat left sidebar */}\r\n          <ChatLeftSidebar recentChatList={users} />\r\n          {/* user chat */}\r\n          {/*<UserChat recentChatList={users} />*/}\r\n          {\r\n              displayChat ? <UserChat recentChatList={users}/> : <div></div>\r\n          }\r\n\r\n      </React.Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { users } = state.Chat;\r\n    return { users };\r\n};\r\n\r\nexport default connect(mapStateToProps, {  })(Index);","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\Auth\\Login.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\Auth\\ForgetPassword.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\Auth\\LockScreen.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\Auth\\Register.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\StarterPage\\index.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\layouts\\AuthLayout\\LeftSidebarMenu.js",["281","282","283"],"import React, {useEffect, useState} from 'react';\r\nimport { Link } from \"react-router-dom\";\r\nimport { Nav, NavItem, NavLink, UncontrolledTooltip, Dropdown, DropdownItem, DropdownToggle, DropdownMenu } from \"reactstrap\";\r\nimport classnames from \"classnames\";\r\nimport {connect, useDispatch, useSelector} from \"react-redux\";\r\n\r\nimport {changeTheme, hideChat, setActiveTab} from \"../../redux/actions\";\r\n\r\n//Import Images\r\n// import logo from \"../../assets/images/logo.svg\"\r\nimport logo from \"../../assets/images/myimg/orange.png\"\r\n// import avatar1 from \"../../assets/images/users/avatar-1.jpg\";\r\n\r\n\r\n//i18n\r\nimport i18n from '../../i18n';\r\n\r\n// falgs\r\nimport usFlag from \"../../assets/images/flags/us.jpg\";\r\nimport spain from \"../../assets/images/flags/spain.jpg\";\r\nimport germany from \"../../assets/images/flags/germany.jpg\";\r\nimport italy from \"../../assets/images/flags/italy.jpg\";\r\nimport russia from \"../../assets/images/flags/russia.jpg\";\r\nimport {HIDE_CHAT} from \"../../redux/chat/constants\";\r\n\r\nfunction LeftSidebarMenu(props) {\r\n\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const [dropdownOpen2, setDropdownOpen2] = useState(false);\r\n    const [dropdownOpenMobile, setDropdownOpenMobile] = useState(false);\r\n    const [lng, setlng] = useState(\"Russian\");\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const toggle = () => setDropdownOpen(!dropdownOpen);\r\n    const toggle2 = () => setDropdownOpen2(!dropdownOpen2);\r\n    const toggleMobile = () => setDropdownOpenMobile(!dropdownOpenMobile);\r\n\r\n    const toggleTab = tab => {\r\n        props.setActiveTab(tab)\r\n    }\r\n    let darkTheme = useSelector(state => state.Layout.darkTheme)\r\n\r\n    const [theme, setTheme] = useState(darkTheme)\r\n\r\n    const toggleTheme = () => {\r\n        dispatch(changeTheme())\r\n        setTheme(!theme)\r\n        window.localStorage.setItem('darkTheme', theme.toString())\r\n    }\r\n\r\n    const activeTab = props.activeTab;\r\n\r\n    /* changes language according to clicked language menu item */\r\n    const changeLanguageAction = (lng) => {\r\n\r\n        /* set the selected language to i18n */\r\n        i18n.changeLanguage(lng);\r\n\r\n        if (lng === \"sp\")\r\n            setlng(\"Spanish\");\r\n        else if (lng === \"gr\")\r\n            setlng(\"German\");\r\n        else if (lng === \"rs\")\r\n            setlng(\"Russian\");\r\n        else if (lng === \"it\")\r\n            setlng(\"Italian\");\r\n        else if (lng === \"eng\")\r\n            setlng(\"English\");\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"side-menu flex-lg-column me-lg-1\">\r\n                {/* LOGO */}\r\n                <div className=\"navbar-brand-box\">\r\n                    <Link to=\"/dashboard\" className=\"logo logo-dark\">\r\n                        <span className=\"logo-sm\">\r\n                            <img src={logo} alt=\"logo\" height=\"30\" />\r\n                        </span>\r\n                    </Link>\r\n\r\n                    <Link to=\"/\" className=\"logo logo-light\">\r\n                        <span className=\"logo-sm\">\r\n                            <img src={logo} alt=\"logo\" height=\"30\" />\r\n                        </span>\r\n                    </Link>\r\n                </div>\r\n                {/* end navbar-brand-box  */}\r\n\r\n                {/* Start side-menu nav */}\r\n                <div className=\"flex-lg-column my-auto\">\r\n                    <Nav pills className=\"side-menu-nav justify-content-center\" role=\"tablist\">\r\n                        <NavItem id=\"profile\">\r\n                            <NavLink id=\"pills-user-tab\" className={classnames({ active: activeTab === 'profile' })} onClick={() => { toggleTab('profile'); }}>\r\n                                <i className=\"ri-user-2-line\"></i>\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <UncontrolledTooltip target=\"profile\" placement=\"top\">\r\n                            Профиль\r\n                        </UncontrolledTooltip>\r\n                        <NavItem id=\"Chats\">\r\n                            <NavLink id=\"pills-chat-tab\" className={classnames({ active: activeTab === 'chat' })} onClick={() => { toggleTab('chat');}}>\r\n                                <i className=\"ri-message-3-line\"></i>\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <UncontrolledTooltip target=\"Chats\" placement=\"top\">\r\n                            Сообщения\r\n                        </UncontrolledTooltip>\r\n                        <NavItem id=\"Contacts\">\r\n                            <NavLink id=\"pills-contacts-tab\" className={classnames({ active: activeTab === 'contacts' })} onClick={() => { toggleTab('contacts'); }}>\r\n                                <i className=\"ri-contacts-line\"></i>\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <UncontrolledTooltip target=\"Contacts\" placement=\"top\">\r\n                            Друзья\r\n                        </UncontrolledTooltip>\r\n                        <NavItem id=\"Groups\">\r\n                            <NavLink id=\"pills-groups-tab\" className={classnames({ active: activeTab === 'group' })} onClick={() => { toggleTab('group'); }}>\r\n                                <i className=\"ri-group-line\"></i>\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <UncontrolledTooltip target=\"Groups\" placement=\"top\">\r\n                            Все пользователи\r\n                        </UncontrolledTooltip>\r\n                        <NavItem id=\"Settings\">\r\n                            <NavLink id=\"pills-setting-tab\" className={classnames({ active: activeTab === 'settings' })} onClick={() => { toggleTab('settings'); }}>\r\n                                <i className=\"ri-settings-2-line\"></i>\r\n                            </NavLink>\r\n                        </NavItem>\r\n                        <UncontrolledTooltip target=\"Settings\" placement=\"top\">\r\n                            Настройки\r\n                        </UncontrolledTooltip>\r\n                        <Dropdown nav isOpen={dropdownOpenMobile} toggle={toggleMobile} className=\"profile-user-dropdown d-inline-block d-lg-none\">\r\n                            <DropdownToggle nav>\r\n                                {\r\n                                    props.profile.photoURL ? <img src={props.profile.photoURL} alt=\"chatvia\" className=\"profile-user rounded-circle\" /> :\r\n                                      <div className=\"avatar-sm rounded-circle img-thumbnail\" style={{marginLeft: '5%'}}>\r\n                                        <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                            {props.profile.displayName.charAt(0)}\r\n                                        </span>\r\n                                      </div>\r\n                                }\r\n                            </DropdownToggle>\r\n                            <DropdownMenu>\r\n                                <DropdownItem onClick={() => { toggleTab('profile'); }}>Профиль <i className=\"ri-profile-line float-end text-muted\"></i></DropdownItem>\r\n                                <DropdownItem onClick={() => { toggleTab('settings'); }}>Настройки <i className=\"ri-settings-3-line float-end text-muted\"></i></DropdownItem>\r\n                                <DropdownItem divider />\r\n                                <DropdownItem href=\"/logout\">Выйти <i className=\"ri-logout-circle-r-line float-end text-muted\"></i></DropdownItem>\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </Nav>\r\n                </div>\r\n                {/* end side-menu nav */}\r\n\r\n                <div className=\"flex-lg-column d-none d-lg-block\">\r\n                    <Nav className=\"side-menu-nav justify-content-center\">\r\n                        <Dropdown nav direction=\"up\" isOpen={dropdownOpen2} className=\"btn-group dropup profile-user-dropdown\" toggle={toggle2}>\r\n                            {/*<DropdownToggle nav>*/}\r\n                            {/*    <i className=\"ri-global-line\"></i>*/}\r\n                            {/*</DropdownToggle>*/}\r\n                            <DropdownMenu className=\"dropdown-menu-end\">\r\n                                <DropdownItem onClick={() => changeLanguageAction('eng')} active={lng === \"English\"}>\r\n                                    <img src={usFlag} alt=\"user\" className=\"me-1\" height=\"12\" /> <span className=\"align-middle\">English</span>\r\n                                </DropdownItem>\r\n\r\n                                <DropdownItem onClick={() => changeLanguageAction('sp')} active={lng === \"Spanish\"}>\r\n                                    <img src={spain} alt=\"user\" className=\"me-1\" height=\"12\" /> <span className=\"align-middle\">Spanish</span>\r\n                                </DropdownItem>\r\n\r\n                                <DropdownItem onClick={() => changeLanguageAction('gr')} active={lng === \"German\"}>\r\n                                    <img src={germany} alt=\"user\" className=\"me-1\" height=\"12\" /> <span className=\"align-middle\">German</span>\r\n                                </DropdownItem>\r\n\r\n                                <DropdownItem onClick={() => changeLanguageAction('it')} active={lng === \"Italian\"}>\r\n                                    <img src={italy} alt=\"user\" className=\"me-1\" height=\"12\" /> <span className=\"align-middle\">Italian</span>\r\n                                </DropdownItem>\r\n\r\n                                <DropdownItem onClick={() => changeLanguageAction('rs')} active={lng === \"Russian\"}>\r\n                                    <img src={russia} alt=\"user\" className=\"me-1\" height=\"12\" /> <span className=\"align-middle\">Russian</span>\r\n                                </DropdownItem>\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                        <NavItem>\r\n                            <NavLink id=\"light-dark\" target=\"_blank\" onClick={() => toggleTheme()}>\r\n                                <i className=\"ri-sun-line theme-mode-icon\"></i>\r\n                            </NavLink>\r\n                            <UncontrolledTooltip target=\"light-dark\" placement=\"right\">\r\n                                Dark / Light Mode\r\n                            </UncontrolledTooltip>\r\n                        </NavItem>\r\n                        <Dropdown nav isOpen={dropdownOpen} className=\"btn-group dropup nav-item profile-user-dropdown d-inline-block\" toggle={toggle}>\r\n                            <DropdownToggle nav>\r\n                                {\r\n                                    props.profile.photoURL ? <img src={props.profile.photoURL} alt=\"\" className=\"profile-user rounded-circle\"/> :\r\n                                      <div className=\"avatar-sm rounded-circle img-thumbnail\" style={{marginLeft: '5%'}}>\r\n                                        <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                            {props.profile.displayName.charAt(0)}\r\n                                        </span>\r\n                                      </div>\r\n                                }\r\n                            </DropdownToggle>\r\n                            <DropdownMenu>\r\n                                <DropdownItem onClick={() => { toggleTab('profile'); }}>Профиль <i className=\"ri-profile-line float-end text-muted\"></i></DropdownItem>\r\n                                <DropdownItem onClick={() => { toggleTab('settings'); }}>Настройки <i className=\"ri-settings-3-line float-end text-muted\"></i></DropdownItem>\r\n                                <DropdownItem divider />\r\n                                <DropdownItem href=\"/logout\">Выйти <i className=\"ri-logout-circle-r-line float-end text-muted\"></i></DropdownItem>\r\n                            </DropdownMenu>\r\n                        </Dropdown>\r\n                    </Nav>\r\n                </div>\r\n                {/* Side menu user */}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStatetoProps = state => {\r\n    return {\r\n        ...state.Layout, profile: state.Auth.user\r\n    };\r\n};\r\n\r\nexport default connect(mapStatetoProps, {\r\n    setActiveTab\r\n})(LeftSidebarMenu);","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\config.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\actions.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\ChatLeftSidebar.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\i18n.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\UserChat\\index.js",["284","285"],"import React, { useState,useEffect, useRef } from 'react';\r\nimport { DropdownMenu, DropdownItem, DropdownToggle, UncontrolledDropdown, Modal, ModalHeader, ModalBody, CardBody, Button, ModalFooter } from \"reactstrap\";\r\nimport {connect, useSelector} from \"react-redux\";\r\n\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n//Import Components\r\nimport UserProfileSidebar from \"../../../components/UserProfileSidebar\";\r\nimport SelectContact from \"../../../components/SelectContact\";\r\nimport UserHead from \"./UserHead\";\r\nimport ImageList from \"./ImageList\";\r\nimport ChatInput from \"./ChatInput\";\r\nimport FileList from \"./FileList\";\r\n\r\n//actions\r\nimport { openUserSidebar,setFullUser } from \"../../../redux/actions\";\r\n\r\n//Import Images\r\nimport avatar4 from \"../../../assets/images/users/avatar-4.jpg\";\r\nimport avatar1 from \"../../../assets/images/users/avatar-1.jpg\";\r\n\r\n//i18n\r\nimport { useTranslation } from 'react-i18next';\r\nimport firebase from \"firebase\";\r\nimport {getFirebaseBackend} from \"../../../helpers/firebase\";\r\n\r\nfunction UserChat(props) {\r\n\r\n    const ref = useRef();\r\n\r\n    const [modal, setModal] = useState(false);\r\n\r\n    const db = firebase.firestore();\r\n    const authUser = getFirebaseBackend().getAuthenticatedUser();\r\n\r\n    /* intilize t variable for multi language implementation */\r\n    const { t } = useTranslation();\r\n\r\n    //demo conversation messages\r\n    //userType must be required\r\n    const [ allUsers ] = useState(props.recentChatList);\r\n    const [chatMessages, setchatMessages] = useState(props.recentChatList[props.active_user].messages);\r\n\r\n    useEffect(() => {\r\n        try {\r\n            setchatMessages(props.recentChatList[props.active_user].messages);\r\n            ref.current.recalculate();\r\n            if (ref.current.el) {\r\n                ref.current.getScrollElement().scrollTop = ref.current.getScrollElement().scrollHeight;\r\n            }\r\n        }\r\n        catch (e)\r\n        {\r\n            return null\r\n        }\r\n    },[props.active_user, props.recentChatList]);\r\n\r\n    const toggle = () => setModal(!modal);\r\n\r\n    const loadMessageToFirestore = async(message) => {\r\n\r\n        const receiver = props.recentChatList[props.active_user];\r\n\r\n        const authUserDoc = db.collection('users').doc(authUser.email)\r\n        const receiverDoc = db.collection('users').doc(receiver.email)\r\n\r\n        const authData = await authUserDoc.get()\r\n        const authChats = authData.data().chats\r\n        const currentChatIndex = authChats.findIndex(chat => chat.email === receiver.email)\r\n\r\n        const receiverData = await receiverDoc.get()\r\n        const receiverChats = receiverData.data().chats\r\n        const receiverChatIndex = receiverChats.findIndex(chat => chat.email === authUser.email)\r\n\r\n        authChats[currentChatIndex].messages.push(message);\r\n        authChats[currentChatIndex].unRead = 0;\r\n        receiverChats[receiverChatIndex].messages.push({...message, userType: 'receiver'})\r\n        receiverChats[receiverChatIndex].unRead++;\r\n\r\n        await authUserDoc.update({\r\n            'chats': authChats\r\n        })\r\n        await receiverDoc.update({\r\n            'chats': receiverChats\r\n        })\r\n    }\r\n\r\n    const addMessage = async(message, type) => {\r\n        var messageObj = null;\r\n\r\n        let d = new Date();\r\n        let h = d.getHours()\r\n        if (h < 10) h = \"0\" + h;\r\n\r\n        let m = d.getMinutes()\r\n        if (m < 10) m = \"0\" + m;\r\n\r\n        const storageRef = firebase.storage().ref()\r\n\r\n        //matches the message type is text, file or image, and create object according to it\r\n        switch (type) {\r\n            case \"textMessage\":\r\n                messageObj = {\r\n                    message : message,\r\n                    time : h + \":\" + m,\r\n                    userType : \"sender\",\r\n                    isFileMessage : false,\r\n                    isImageMessage : false\r\n                }\r\n                break;\r\n\r\n            case \"fileMessage\":\r\n                const fileRef = storageRef.child('messages/' + message.name)\r\n                await fileRef.put(message.file)\r\n                const fileURL = await fileRef.getDownloadURL()\r\n\r\n                messageObj = {\r\n                    message : message.name,\r\n                    fileMessage : message.name,\r\n                    fileURL: fileURL,\r\n                    size : (+message.size * 0.0009765625 * 0.0009765625).toFixed(2),\r\n                    time : h + \":\" + m,\r\n                    userType : \"sender\",\r\n                    isFileMessage : true,\r\n                    isImageMessage : false\r\n                }\r\n                break;\r\n\r\n            case \"imageMessage\":\r\n\r\n                const imageRef = storageRef.child('messages/' + message.name)\r\n                await imageRef.put(message)\r\n                const imageURL = await imageRef.getDownloadURL()\r\n\r\n                let imageMessage = [\r\n                    {image: imageURL}\r\n                ]\r\n\r\n                messageObj = {\r\n                    message : message.name,\r\n                    imageMessage : imageMessage,\r\n                    size : message.size,\r\n                    time : h + \":\" + m,\r\n                    userType : \"sender\",\r\n                    isImageMessage : true,\r\n                    isFileMessage : false\r\n                }\r\n                break;\r\n        \r\n            default:\r\n                break;\r\n        }\r\n     \r\n        //add message object to chat        \r\n        setchatMessages([...chatMessages, messageObj]);\r\n\r\n        await loadMessageToFirestore(messageObj);\r\n\r\n        let copyallUsers = [...allUsers];\r\n        copyallUsers[props.active_user].messages = [...chatMessages, messageObj];\r\n        copyallUsers[props.active_user].isTyping = false;\r\n        props.setFullUser(copyallUsers);\r\n\r\n        scrolltoBottom();\r\n    }\r\n\r\n    function scrolltoBottom(){\r\n        if (ref.current.el) {\r\n            ref.current.getScrollElement().scrollTop = ref.current.getScrollElement().scrollHeight;\r\n        }\r\n    }\r\n\r\n\r\n    const deleteMessage = (id) => {\r\n        let conversation = chatMessages;\r\n\r\n        var filtered = conversation.filter(function (item) {\r\n            return item.id !== id;\r\n        });\r\n\r\n        setchatMessages(filtered);\r\n    }\r\n\r\n    const profile = useSelector(state => state.Auth.user)\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"user-chat w-100 user-chat-show\">\r\n                    <div className=\"d-lg-flex\">\r\n\r\n                        <div className={props.userSidebar ? \"w-70\" : \"w-100\"}>\r\n\r\n                            {/* render user head */}\r\n                            <UserHead/>\r\n\r\n                            <SimpleBar\r\n                              style={{maxHeight: \"100%\"}}\r\n                              ref={ref}\r\n                              className=\"chat-conversation p-3 p-lg-4\"\r\n                              id=\"messages\">\r\n                                <ul className=\"list-unstyled mb-0\">\r\n\r\n                                    {\r\n                                        chatMessages.map((chat, key) =>\r\n                                          chat.isToday && chat.isToday === true ? <li key={\"dayTitle\" + key}>\r\n                                                <div className=\"chat-day-title\">\r\n                                                    <span className=\"title\">Сегодня</span>\r\n                                                </div>\r\n                                            </li> :\r\n                                            (props.recentChatList[props.active_user].isGroup === true) ?\r\n                                              <li key={key} className={chat.userType === \"sender\" ? \"right\" : \"\"}>\r\n                                                  <div className=\"conversation-list\">\r\n\r\n                                                      <div className=\"chat-avatar\">\r\n                                                          {chat.userType === \"sender\" ?\r\n                                                            <img src={avatar1} alt=\"chatvia\"/> :\r\n                                                            props.recentChatList[props.active_user].profilePicture === \"Null\" ?\r\n                                                              <div className=\"chat-user-img align-self-center me-3\">\r\n                                                                  <div className=\"avatar-xs\">\r\n                                                                        <span\r\n                                                                          className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                            {chat.userName && chat.userName.charAt(0)}\r\n                                                                        </span>\r\n                                                                  </div>\r\n                                                              </div>\r\n                                                              : <img\r\n                                                                src={props.recentChatList[props.active_user].profilePicture}\r\n                                                                alt=\"chatvia\"/>\r\n                                                          }\r\n                                                      </div>\r\n\r\n                                                      <div className=\"user-chat-content\">\r\n                                                          <div className=\"ctext-wrap\">\r\n                                                              <div className=\"ctext-wrap-content\">\r\n                                                                  {\r\n                                                                      chat.message &&\r\n                                                                      <p className=\"mb-0\">\r\n                                                                          {chat.message}\r\n                                                                      </p>\r\n                                                                  }\r\n                                                                  {\r\n                                                                      chat.imageMessage &&\r\n                                                                      // image list component\r\n                                                                      <ImageList images={chat.imageMessage}/>\r\n                                                                  }\r\n                                                                  {\r\n                                                                      chat.fileMessage &&\r\n                                                                      //file input component\r\n                                                                      <FileList fileName={chat.fileMessage}\r\n                                                                                fileSize={chat.size}\r\n                                                                                fileURL={chat.fileURL}\r\n                                                                      />\r\n                                                                  }\r\n                                                                  {\r\n                                                                      chat.isTyping &&\r\n                                                                      <p className=\"mb-0\">\r\n                                                                          Печатает\r\n                                                                          <span className=\"animate-typing\">\r\n                                                                                <span className=\"dot ms-1\"></span>\r\n                                                                                <span className=\"dot ms-1\"></span>\r\n                                                                                <span className=\"dot ms-1\"></span>\r\n                                                                            </span>\r\n                                                                      </p>\r\n                                                                  }\r\n                                                                  {\r\n                                                                      !chat.isTyping && <p className=\"chat-time mb-0\"><i\r\n                                                                        className=\"ri-time-line align-middle\"></i> <span\r\n                                                                        className=\"align-middle\">{chat.time}</span></p>\r\n                                                                  }\r\n                                                              </div>\r\n                                                              {\r\n                                                                  !chat.isTyping &&\r\n                                                                  <UncontrolledDropdown className=\"align-self-start\">\r\n                                                                      <DropdownToggle tag=\"a\">\r\n                                                                          <i className=\"ri-more-2-fill\"></i>\r\n                                                                      </DropdownToggle>\r\n                                                                      <DropdownMenu>\r\n                                                                          {/*<DropdownItem>{t('Copy')} <i*/}\r\n                                                                          {/*  className=\"ri-file-copy-line float-end text-muted\"></i></DropdownItem>*/}\r\n                                                                          {/*<DropdownItem>{t('Save')} <i*/}\r\n                                                                          {/*  className=\"ri-save-line float-end text-muted\"></i></DropdownItem>*/}\r\n                                                                          {/*<DropdownItem onClick={toggle}>Forward <i*/}\r\n                                                                          {/*  className=\"ri-chat-forward-line float-end text-muted\"></i></DropdownItem>*/}\r\n                                                                          <DropdownItem\r\n                                                                            onClick={() => deleteMessage(chat.id)}>Delete <i\r\n                                                                            className=\"ri-delete-bin-line float-end text-muted\"></i></DropdownItem>\r\n                                                                      </DropdownMenu>\r\n                                                                  </UncontrolledDropdown>\r\n                                                              }\r\n\r\n                                                          </div>\r\n                                                          {\r\n                                                              <div\r\n                                                                className=\"conversation-name\">{chat.userType === \"sender\" ? profile.displayName : chat.userName}</div>\r\n                                                          }\r\n                                                      </div>\r\n                                                  </div>\r\n                                              </li>\r\n                                              :\r\n                                              <li key={key} className={chat.userType === \"sender\" ? \"right\" : \"\"}>\r\n                                                  <div className=\"conversation-list\">\r\n                                                      {\r\n                                                          //logic for display user name and profile only once, if current and last messaged sent by same receiver\r\n                                                          chatMessages[key + 1] ? chatMessages[key].userType === chatMessages[key + 1].userType ?\r\n\r\n                                                            <div className=\"chat-avatar\">\r\n                                                                <div className=\"blank-div\"></div>\r\n                                                            </div>\r\n                                                            :\r\n                                                            <div className=\"chat-avatar\">\r\n                                                                {chat.userType === \"sender\" ?\r\n                                                                  profile.photoURL ?\r\n                                                                  <img src={profile.photoURL} alt=\"chatvia\"/> :\r\n                                                                    <div className=\"avatar-xs\">\r\n                                                                        <span\r\n                                                                          className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                            {profile.displayName.charAt(0)}\r\n                                                                        </span>\r\n                                                                    </div> :\r\n                                                                  props.recentChatList[props.active_user].profilePicture === \"Null\" ?\r\n                                                                    <div\r\n                                                                      className=\"chat-user-img align-self-center me-3\">\r\n                                                                        <div className=\"avatar-xs\">\r\n                                                                                                <span\r\n                                                                                                  className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                                                    {props.recentChatList[props.active_user].name.charAt(0)}\r\n                                                                                                </span>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                    : <img\r\n                                                                      src={props.recentChatList[props.active_user].profilePicture}\r\n                                                                      alt=\"chatvia\"/>\r\n                                                                }\r\n                                                            </div>\r\n                                                            : <div className=\"chat-avatar\">\r\n                                                                {chat.userType === \"sender\" ?\r\n                                                                  profile.photoURL ?\r\n                                                                  <img src={profile.photoURL} alt=\"chatvia\"/> :\r\n                                                                    <div className=\"avatar-xs\">\r\n                                                                                                <span\r\n                                                                                                  className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                                                    {profile.displayName.charAt(0)}\r\n                                                                                                </span>\r\n                                                                    </div>\r\n                                                                  :\r\n                                                                  props.recentChatList[props.active_user].profilePicture === \"Null\" ?\r\n                                                                    <div className=\"chat-user-img align-self-center me-3\">\r\n                                                                        <div className=\"avatar-xs\">\r\n                                                                                                <span\r\n                                                                                                  className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                                                    {props.recentChatList[props.active_user].name.charAt(0)}\r\n                                                                                                </span>\r\n                                                                        </div>\r\n                                                                    </div>\r\n                                                                    : <img\r\n                                                                      src={props.recentChatList[props.active_user].profilePicture}\r\n                                                                      alt=\"chatvia\"/>\r\n                                                                }\r\n                                                            </div>\r\n                                                      }\r\n\r\n\r\n                                                      <div className=\"user-chat-content\">\r\n                                                          <div className=\"ctext-wrap\">\r\n                                                              <div className=\"ctext-wrap-content\">\r\n                                                                  {\r\n                                                                      chat.message &&\r\n                                                                      <p className=\"mb-0\">\r\n                                                                          {chat.message}\r\n                                                                      </p>\r\n                                                                  }\r\n                                                                  {\r\n                                                                      chat.imageMessage &&\r\n                                                                      // image list component\r\n                                                                      <ImageList images={chat.imageMessage}/>\r\n                                                                  }\r\n                                                                  {\r\n                                                                      chat.fileMessage &&\r\n                                                                      //file input component\r\n                                                                      <FileList fileName={chat.fileMessage}\r\n                                                                                fileSize={chat.size}\r\n                                                                                fileURL={chat.fileURL}\r\n                                                                      />\r\n                                                                  }\r\n                                                                  {\r\n                                                                      chat.isTyping &&\r\n                                                                      <p className=\"mb-0\">\r\n                                                                          Печатает\r\n                                                                          <span className=\"animate-typing\">\r\n                                                                                <span className=\"dot ms-1\"></span>\r\n                                                                                <span className=\"dot ms-1\"></span>\r\n                                                                                <span className=\"dot ms-1\"></span>\r\n                                                                            </span>\r\n                                                                      </p>\r\n                                                                  }\r\n                                                                  {\r\n                                                                      !chat.isTyping && <p className=\"chat-time mb-0\"><i\r\n                                                                        className=\"ri-time-line align-middle\"></i> <span\r\n                                                                        className=\"align-middle\">{chat.time}</span></p>\r\n                                                                  }\r\n                                                              </div>\r\n                                                              {\r\n                                                                  !chat.isTyping &&\r\n                                                                  <UncontrolledDropdown className=\"align-self-start\">\r\n                                                                      <DropdownToggle tag=\"a\">\r\n                                                                          <i className=\"ri-more-2-fill\"></i>\r\n                                                                      </DropdownToggle>\r\n                                                                      <DropdownMenu>\r\n                                                                          {/*<DropdownItem>{t('Copy')} <i*/}\r\n                                                                          {/*  className=\"ri-file-copy-line float-end text-muted\"></i></DropdownItem>*/}\r\n                                                                          {/*<DropdownItem>{t('Save')} <i*/}\r\n                                                                          {/*  className=\"ri-save-line float-end text-muted\"></i></DropdownItem>*/}\r\n                                                                          {/*<DropdownItem onClick={toggle}>Forward <i*/}\r\n                                                                          {/*  className=\"ri-chat-forward-line float-end text-muted\"></i></DropdownItem>*/}\r\n                                                                          <DropdownItem\r\n                                                                            onClick={() => deleteMessage(chat.id)}>Удалить <i\r\n                                                                            className=\"ri-delete-bin-line float-end text-muted\"></i></DropdownItem>\r\n                                                                      </DropdownMenu>\r\n                                                                  </UncontrolledDropdown>\r\n                                                              }\r\n\r\n                                                          </div>\r\n                                                          {\r\n                                                              chatMessages[key + 1] ? chatMessages[key].userType === chatMessages[key + 1].userType ? null :\r\n                                                                <div\r\n                                                                  className=\"conversation-name\">{chat.userType === \"sender\" ? profile.displayName : props.recentChatList[props.active_user].name}</div> :\r\n                                                                <div\r\n                                                                  className=\"conversation-name\">{chat.userType === \"sender\" ? profile.displayName : props.recentChatList[props.active_user].name}</div>\r\n                                                          }\r\n                                                            {/*<div className=\"conversation-name\">{chat.userType === \"sender\" ? \"Admin\" : props.recentChatList[props.active_user].name}</div>*/}\r\n\r\n                                                      </div>\r\n                                                  </div>\r\n                                              </li>\r\n                                        )\r\n                                    }\r\n                                </ul>\r\n                            </SimpleBar>\r\n\r\n                            <Modal backdrop=\"static\" isOpen={modal} centered toggle={toggle}>\r\n                                <ModalHeader toggle={toggle}>Forward to...</ModalHeader>\r\n                                <ModalBody>\r\n                                    <CardBody className=\"p-2\">\r\n                                        <SimpleBar style={{maxHeight: \"200px\"}}>\r\n                                            <SelectContact handleCheck={() => {\r\n                                            }}/>\r\n                                        </SimpleBar>\r\n                                        <ModalFooter className=\"border-0\">\r\n                                            <Button color=\"primary\">Forward</Button>\r\n                                        </ModalFooter>\r\n                                    </CardBody>\r\n                                </ModalBody>\r\n                            </Modal>\r\n\r\n                            <ChatInput onaddMessage={addMessage}/>\r\n                        </div>\r\n\r\n                        <UserProfileSidebar activeUser={props.recentChatList[props.active_user]}/>\r\n\r\n                    </div>\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { active_user } = state.Chat;\r\n    const { userSidebar } = state.Layout;\r\n    return { active_user,userSidebar };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, { openUserSidebar,setFullUser })(UserChat));\r\n\r\n","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\layout\\actions.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\chat\\actions.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\Tabs\\Profile.js",["286","287","288","289","290","291","292","293"],"import React, {useEffect, useState} from 'react';\r\nimport { Dropdown, DropdownMenu, DropdownItem, DropdownToggle, Card } from \"reactstrap\";\r\n\r\n//Import components\r\nimport CustomCollapse from \"../../../components/CustomCollapse\";\r\nimport AttachedFiles from \"../../../components/AttachedFiles\";\r\n\r\n//Import Images\r\nimport avatar1 from \"../../../assets/images/users/avatar-1.jpg\";\r\n\r\n//i18n\r\nimport { useTranslation } from 'react-i18next';\r\nimport {addLoggedinUser} from \"../../../redux/chat/actions\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport firebase from \"firebase\";\r\nimport {getFirebaseBackend} from \"../../../helpers/firebase\";\r\nimport {getProfile} from \"../../../redux/auth/actions\";\r\n\r\nfunction Profile(props) {\r\n\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const [isOpen1, setIsOpen1] = useState(true);\r\n    const [isOpen2, setIsOpen2] = useState(false);\r\n    const [files] = useState([]);\r\n\r\n    /* intilize t variable for multi language implementation */\r\n    const { t } = useTranslation();\r\n\r\n    const toggleCollapse1 = () => {\r\n        setIsOpen1(!isOpen1);\r\n        setIsOpen2(false);\r\n    };\r\n\r\n    const toggleCollapse2 = () => {\r\n        setIsOpen2(!isOpen2);\r\n        setIsOpen1(false);\r\n    };\r\n\r\n    const toggle = () => setDropdownOpen(!dropdownOpen);\r\n\r\n    const profile = useSelector(state => state.Auth.user)\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                            <div className=\"px-4 pt-4\">\r\n                                <div className=\"user-chat-nav float-end\">\r\n                                    <Dropdown isOpen={dropdownOpen} toggle={toggle}>\r\n                                        <DropdownToggle tag=\"a\" className=\"font-size-18 text-muted dropdown-toggle\">\r\n                                            <i className=\"ri-more-2-fill\"></i>\r\n                                        </DropdownToggle>\r\n                                        <DropdownMenu right>\r\n                                            <DropdownItem>Редактировать</DropdownItem>\r\n                                            {/*<DropdownItem>{t('Action')}</DropdownItem>*/}\r\n                                            {/*<DropdownItem divider />*/}\r\n                                            {/*<DropdownItem>{t('Another action')}</DropdownItem>*/}\r\n                                        </DropdownMenu>\r\n                                    </Dropdown>\r\n                                </div>\r\n                                <h4 className=\"mb-0\">Мой профиль</h4>\r\n                            </div>\r\n\r\n                            <div className=\"text-center p-4 border-bottom\">\r\n                                <div className=\"mb-4\">\r\n                                    {\r\n                                        profile.photoURL ? <img src={profile.photoURL} className=\"rounded-circle avatar-lg\" alt=\"chatvia\" />\r\n                                          :\r\n                                          <div className=\"avatar-md rounded-circle img-thumbnail\" style={{marginLeft: '39%'}}>\r\n                                                <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\" style={{fontSize: '150%'}}>\r\n                                                    {profile.displayName.charAt(0)}\r\n                                                </span>\r\n                                          </div>\r\n                                    }\r\n\r\n                                </div>\r\n\r\n                                <h5 className=\"font-size-16 mb-1 text-truncate\">{profile.displayName}</h5>\r\n                                <p className=\"text-muted text-truncate mb-1\"><i className=\"ri-record-circle-fill font-size-10 text-success me-1 d-inline-block\"></i>Онлайн</p>\r\n                            </div>\r\n                           {/* End profile user  */}\r\n\r\n                             {/* Start user-profile-desc */}\r\n                            <div className=\"p-4 user-profile-desc\">\r\n                                {/*<div className=\"text-muted\">*/}\r\n                                {/*    <p className=\"mb-4\">{t('If several languages coalesce, the grammar of the resulting language is more simple and regular than that of the individual.')}</p>*/}\r\n                                {/*</div>*/}\r\n\r\n\r\n                                <div id=\"profile-user-accordion-1\" className=\"custom-accordion\">\r\n                                    <Card className=\"shadow-none border mb-2\">\r\n                                        {/* import collaps */}\r\n                                        <CustomCollapse\r\n                                            title = \"Обо мне\"\r\n                                            iconClass = \"ri-user-2-line\"\r\n                                            isOpen={isOpen1}\r\n                                            toggleCollapse={toggleCollapse1}\r\n                                        >\r\n                                                <div>\r\n                                                    <p className=\"text-muted mb-1\">Имя</p>\r\n                                                    <h5 className=\"font-size-14\">{profile.displayName}</h5>\r\n                                                </div>\r\n\r\n                                                <div className=\"mt-4\">\r\n                                                    <p className=\"text-muted mb-1\">Email</p>\r\n                                                    <h5 className=\"font-size-14\">{profile.email}</h5>\r\n                                                </div>\r\n\r\n                                                {/*<div className=\"mt-4\">*/}\r\n                                                {/*    <p className=\"text-muted mb-1\">{t('Time')}</p>*/}\r\n                                                {/*    <h5 className=\"font-size-14\">{t('11:40 AM')}</h5>*/}\r\n                                                {/*</div>*/}\r\n\r\n                                                <div className=\"mt-4\">\r\n                                                    <p className=\"text-muted mb-1\">Расположение</p>\r\n                                                    <h5 className=\"font-size-14 mb-0\">{profile.location}</h5>\r\n                                                </div>\r\n                                        </CustomCollapse>\r\n                                    </Card>\r\n                                   {/* End About card  */}\r\n\r\n                                    <Card className=\"mb-1 shadow-none border\">\r\n                                        {/* import collaps */}\r\n                                        <CustomCollapse\r\n                                            title = \"Загруженные файлы\"\r\n                                            iconClass = \"ri-attachment-line\"\r\n                                            isOpen={isOpen2}\r\n                                            toggleCollapse={toggleCollapse2}\r\n                                        >\r\n                                            {/* attached files */}\r\n                                            <AttachedFiles files={files} />\r\n                                        </CustomCollapse>\r\n                                    </Card>\r\n                                   {/* End Attached Files card  */}\r\n                                </div>\r\n                                {/* end profile-user-accordion  */}\r\n\r\n                            </div>\r\n                            {/* end user-profile-desc  */}\r\n                        </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Profile;","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\Tabs\\Groups.js",["294","295","296","297"],"import React, { Component } from 'react';\r\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter, UncontrolledTooltip, Form, Label, Input, Collapse, CardHeader, CardBody, Alert, InputGroup, Card, Badge } from 'reactstrap';\r\nimport { Link } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { withTranslation } from 'react-i18next';\r\n\r\n//simple bar\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\n//components\r\nimport SelectContact from \"../../../components/SelectContact\";\r\n\r\nimport img1 from '../../../assets/images/users/avatar-1.jpg';\r\n\r\n//actions\r\nimport {activeUser, addLoggedinUser, addNewChatUser, createGroup, setActiveTab, showChat} from \"../../../redux/actions\";\r\n\r\n\r\nclass Groups extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            modal: false,\r\n            isOpenCollapse: false,\r\n            groups: this.props.groups,\r\n            users: this.props.users,\r\n            selectedContact: [],\r\n            isOpenAlert: false,\r\n            message: \"\",\r\n            groupName: \"\",\r\n            groupDesc: \"\"\r\n        }\r\n        this.toggle = this.toggle.bind(this);\r\n        this.toggleCollapse = this.toggleCollapse.bind(this);\r\n        this.createGroup = this.createGroup.bind(this);\r\n        this.handleCheck = this.handleCheck.bind(this);\r\n        this.handleChangeGroupName = this.handleChangeGroupName.bind(this);\r\n        this.handleChangeGroupDesc = this.handleChangeGroupDesc.bind(this);\r\n        this.openChatWithUser = this.openChatWithUser.bind(this);\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({ modal: !this.state.modal });\r\n    }\r\n\r\n    toggleCollapse() {\r\n        this.setState({ isOpenCollapse: !this.state.isOpenCollapse });\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                groups: this.props.groups\r\n            });\r\n        }\r\n    }\r\n\r\n    createGroup() {\r\n        if (this.state.selectedContact.length > 2) {\r\n            // gourpId : 5, name : \"#Project-aplha\", profilePicture : \"Null\", isGroup : true, unRead : 0, isNew : true, desc : \"project related Group\",\r\n            var obj = {\r\n                gourpId: this.state.groups.length + 1,\r\n                name: \"#\" + this.state.groupName,\r\n                profilePicture: \"Null\",\r\n                isGroup: true,\r\n                unRead: 0,\r\n                isNew: true,\r\n                desc: this.state.groupDesc,\r\n                members: this.state.selectedContact\r\n            }\r\n            //call action for creating a group\r\n            this.props.createGroup(obj);\r\n            this.toggle();\r\n\r\n        } else if (this.state.selectedContact.length === 1) {\r\n            this.setState({ message: \"Minimum 2 members required!!!\", isOpenAlert: true });\r\n        } else {\r\n            this.setState({ message: \"Please Select Members!!!\", isOpenAlert: true });\r\n        }\r\n        setTimeout(\r\n            function () {\r\n                this.setState({ isOpenAlert: false });\r\n            }\r\n                .bind(this),\r\n            3000\r\n        );\r\n    }\r\n\r\n    handleCheck(e, contactId) {\r\n        var selected = this.state.selectedContact;\r\n        var obj;\r\n        if (e.target.checked) {\r\n            obj = {\r\n                id: contactId,\r\n                name: e.target.value\r\n            };\r\n            selected.push(obj);\r\n            this.setState({ selectedContact: selected })\r\n        }\r\n    }\r\n\r\n    handleChangeGroupName(e) {\r\n        this.setState({ groupName: e.target.value });\r\n    }\r\n\r\n    handleChangeGroupDesc(e) {\r\n        this.setState({ groupDesc: e.target.value });\r\n    }\r\n\r\n    openChatWithUser(e, user) {\r\n\r\n        e.preventDefault()\r\n\r\n        const chats = this.props.users;\r\n\r\n        let isFind = chats.findIndex(chat => chat.email === user.email)\r\n\r\n        if (isFind < 0) {\r\n            this.props.addNewChatUser({\r\n                email: user.email,\r\n                name: user.displayName,\r\n                profilePicture: user.photoURL ? user.photoURL : \"Null\",\r\n                status: user.status,\r\n                unRead: 0,\r\n                isGroup: false,\r\n                location: user.location,\r\n                messages: []\r\n            });\r\n            isFind = chats.length\r\n        }\r\n\r\n        this.props.activeUser(isFind);\r\n        this.props.setActiveTab('chat');\r\n        if (isFind >= 0) this.props.showChat();\r\n\r\n    }\r\n\r\n    render() {\r\n        const { t } = this.props;\r\n        return (\r\n            <React.Fragment>\r\n                <div>\r\n                    <div className=\"p-4\">\r\n                        <div className=\"user-chat-nav float-end\">\r\n                            {/*<div id=\"create-group\">*/}\r\n                            {/*    /!* Button trigger modal *!/*/}\r\n                            {/*    <Button onClick={this.toggle} type=\"button\" color=\"link\" className=\"text-decoration-none text-muted font-size-18 py-0\">*/}\r\n                            {/*        <i className=\"ri-group-line me-1\"></i>*/}\r\n                            {/*    </Button>*/}\r\n                            {/*</div>*/}\r\n                            {/*<UncontrolledTooltip target=\"create-group\" placement=\"bottom\">*/}\r\n                            {/*    Create group*/}\r\n                            {/*        </UncontrolledTooltip>*/}\r\n\r\n                        </div>\r\n                        <h4 className=\"mb-4\">Все пользователи</h4>\r\n\r\n                        {/* Start add group Modal */}\r\n                        <Modal isOpen={this.state.modal} centered toggle={this.toggle}>\r\n                            <ModalHeader tag=\"h5\" className=\"modal-title font-size-14\" toggle={this.toggle}>{t('Create New Group')}</ModalHeader>\r\n                            <ModalBody className=\"p-4\">\r\n                                <Form>\r\n                                    <div className=\"mb-4\">\r\n                                        <Label className=\"form-label\" htmlFor=\"addgroupname-input\">{t('Group Name')}</Label>\r\n                                        <Input type=\"text\" className=\"form-control\" id=\"addgroupname-input\" value={this.state.groupName}\r\n                                               onChange={(e) => this.handleChangeGroupName(e)} placeholder=\"Enter Group Name\" />\r\n                                    </div>\r\n                                    <div className=\"mb-4\">\r\n                                        <Label className=\"form-label\">{t('Group Members')}</Label>\r\n                                        <Alert isOpen={this.state.isOpenAlert} color=\"danger\">\r\n                                            {this.state.message}\r\n                                        </Alert>\r\n                                        <div className=\"mb-3\">\r\n                                            <Button color=\"light\" size=\"sm\" type=\"button\" onClick={this.toggleCollapse}>\r\n                                                {t('Select Members')}\r\n                                            </Button>\r\n                                        </div>\r\n\r\n                                        <Collapse isOpen={this.state.isOpenCollapse} id=\"groupmembercollapse\">\r\n                                            <Card className=\"border\">\r\n                                                <CardHeader>\r\n                                                    <h5 className=\"font-size-15 mb-0\">{t('Contacts')}</h5>\r\n                                                </CardHeader>\r\n                                                <CardBody className=\"p-2\">\r\n                                                    <SimpleBar style={{ maxHeight: \"150px\" }}>\r\n                                                        {/* contacts */}\r\n                                                        <div id=\"addContacts\">\r\n                                                            <SelectContact handleCheck={this.handleCheck} />\r\n                                                        </div>\r\n                                                    </SimpleBar>\r\n                                                </CardBody>\r\n                                            </Card>\r\n                                        </Collapse>\r\n                                    </div>\r\n                                    <div>\r\n                                        <Label className=\"form-label\" htmlFor=\"addgroupdescription-input\">Description</Label>\r\n                                        <textarea className=\"form-control\" id=\"addgroupdescription-input\" value={this.state.groupDesc}\r\n                                                  onChange={(e) => this.handleChangeGroupDesc(e)} rows=\"3\" placeholder=\"Enter Description\"></textarea>\r\n                                    </div>\r\n                                </Form>\r\n                            </ModalBody>\r\n                            <ModalFooter>\r\n                                <Button type=\"button\" color=\"link\" onClick={this.toggle}>{t('Close')}</Button>\r\n                                <Button type=\"button\" color=\"primary\" onClick={this.createGroup}>Create Group</Button>\r\n                            </ModalFooter>\r\n                        </Modal>\r\n                        {/* End add group Modal */}\r\n\r\n                        <div className=\"search-box chat-search-box\">\r\n                            <InputGroup size=\"lg\" className=\"bg-light rounded-lg\">\r\n                                <Button color=\"link\" className=\"text-decoration-none text-muted pr-1\" type=\"button\">\r\n                                    <i className=\"ri-search-line search-icon font-size-18\"></i>\r\n                                </Button>\r\n                                <Input type=\"text\" className=\"form-control bg-light\" placeholder=\"Найти пользователя...\" />\r\n                            </InputGroup>\r\n                        </div>\r\n                        {/* end search-box */}\r\n                    </div>\r\n\r\n                    {/* Start chat-group-list */}\r\n                    <SimpleBar style={{ maxHeight: \"100%\" }} className=\"p-4 chat-message-list chat-group-list\">\r\n\r\n\r\n                        <ul className=\"list-unstyled chat-list\">\r\n                            {\r\n                                this.state.groups.map((group, key) =>\r\n                                    <li key={key} onClick={(e) => this.openChatWithUser(e, group)}>\r\n                                        <Link to=\"#\">\r\n                                            <div className=\"d-flex align-items-center\">\r\n                                                <div className={\"chat-user-img me-3 ms-0\"}>\r\n                                                    {\r\n                                                        group.photoURL ? <img src={group.photoURL}\r\n                                                                              className=\"rounded-circle avatar-sm\"\r\n                                                                              alt=\"Аватар\"/> :\r\n                                                          <div className=\"avatar-sm\">\r\n                                                            <span\r\n                                                              className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                {group.displayName.charAt(0)}\r\n                                                            </span>\r\n                                                          </div>\r\n                                                    }\r\n                                                    {\r\n                                                        group.status && <span className={\"user-status\" + \" \" + group.status}></span>\r\n                                                    }\r\n                                                </div>\r\n                                                <div className=\"flex-1 overflow-hidden\">\r\n                                                    <h5 className=\"text-truncate font-size-14 mb-0\">\r\n                                                        {group.displayName}\r\n                                                        {\r\n                                                            group.unRead !== 0\r\n                                                                ? <Badge color=\"none\" pill className=\"badge-soft-danger float-end\">\r\n                                                                    {\r\n                                                                        group.unRead >= 20 ? group.unRead + \"+\" : group.unRead\r\n                                                                    }\r\n                                                                </Badge>\r\n                                                                : null\r\n                                                        }\r\n\r\n                                                        {\r\n                                                            group.isNew && <Badge color=\"none\" pill className=\"badge-soft-danger float-end\">New</Badge>\r\n                                                        }\r\n\r\n                                                    </h5>\r\n                                                </div>\r\n                                            </div>\r\n                                        </Link>\r\n                                    </li>\r\n                                )\r\n                            }\r\n                        </ul>\r\n                    </SimpleBar>\r\n                    {/* End chat-group-list */}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { groups, active_user, users} = state.Chat;\r\n    return { groups, active_user, users };\r\n};\r\n\r\nexport default (connect(mapStateToProps, { createGroup, addNewChatUser, activeUser, setActiveTab, showChat })(withTranslation()(Groups)));","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\Tabs\\Contacts.js",["298","299"],"import React, { Component } from 'react';\r\nimport { UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem, Button, Modal, ModalHeader, ModalBody, ModalFooter, UncontrolledTooltip, Form, Label, Input, InputGroup, } from 'reactstrap';\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { withTranslation } from 'react-i18next';\r\nimport firebase from \"firebase\";\r\n\r\n//use sortedContacts variable as global variable to sort contacts\r\nlet sortedContacts = [\r\n    {\r\n        group: \"A\",\r\n        children: [{ name: \"Demo\" }]\r\n    }\r\n]\r\n\r\nclass Contacts extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            modal: false,\r\n            contacts: this.props.contacts\r\n        }\r\n        this.toggle = this.toggle.bind(this);\r\n        this.sortContact = this.sortContact.bind(this);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                contacts: this.props.contacts\r\n            });\r\n        }\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({ modal: !this.state.modal });\r\n    }\r\n\r\n    sortContact() {\r\n        let data = this.state.contacts.reduce((r, e) => {\r\n            try {\r\n                // get first letter of name of current element\r\n                let group = e.displayName[0];\r\n                // if there is no property in accumulator with this letter create it\r\n                if (!r[group]) r[group] = { group, children: [e] }\r\n                // if there is push current element to children array for that letter\r\n                else r[group].children.push(e);\r\n            } catch (error) {\r\n                return sortedContacts;\r\n            }\r\n            // return accumulator\r\n            return r;\r\n        }, {})\r\n\r\n        // since data at this point is an object, to get array of values\r\n        // we use Object.values method\r\n        let result = Object.values(data);\r\n        this.setState({ contacts: result });\r\n        sortedContacts = result;\r\n        return result;\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.sortContact();\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.sortContact();\r\n    }\r\n\r\n    render() {\r\n        const { t } = this.props;\r\n        return (\r\n            <React.Fragment>\r\n                <div>\r\n                    <div className=\"p-4\">\r\n                        <div className=\"user-chat-nav float-end\">\r\n                            <div id=\"add-contact\">\r\n                                {/* Button trigger modal */}\r\n                                <Button type=\"button\" color=\"link\" onClick={this.toggle} className=\"text-decoration-none text-muted font-size-18 py-0\">\r\n                                    <i className=\"ri-user-add-line\"></i>\r\n                                </Button>\r\n                            </div>\r\n                            <UncontrolledTooltip target=\"add-contact\" placement=\"bottom\">\r\n                                Добавить друга\r\n                                    </UncontrolledTooltip>\r\n                        </div>\r\n                        <h4 className=\"mb-4\">Друзья</h4>\r\n\r\n                        {/* Start Add contact Modal */}\r\n                        <Modal isOpen={this.state.modal} centered toggle={this.toggle}>\r\n                            <ModalHeader tag=\"h5\" className=\"font-size-16\" toggle={this.toggle}>\r\n                                Добавить друга\r\n                            </ModalHeader>\r\n                            <ModalBody className=\"p-4\">\r\n                                <Form>\r\n                                    <div className=\"mb-4\">\r\n                                        <Label className=\"form-label\" htmlFor=\"addcontactemail-input\">Email</Label>\r\n                                        <Input type=\"email\" className=\"form-control\" id=\"addcontactemail-input\" placeholder=\"Введите Email\" />\r\n                                    </div>\r\n                                    <div>\r\n                                        <Label className=\"form-label\" htmlFor=\"addcontact-invitemessage-input\">Сообщение</Label>\r\n                                        <textarea className=\"form-control\" id=\"addcontact-invitemessage-input\" rows=\"3\" placeholder=\"Введите сообщение\"></textarea>\r\n                                    </div>\r\n                                </Form>\r\n                            </ModalBody>\r\n                            <ModalFooter>\r\n                                <Button type=\"button\" color=\"link\" onClick={this.toggle}>Закрыть</Button>\r\n                                <Button type=\"button\" color=\"primary\">Добавить</Button>\r\n                            </ModalFooter>\r\n                        </Modal>\r\n                        {/* End Add contact Modal */}\r\n\r\n                        <div className=\"search-box chat-search-box\">\r\n                            <InputGroup size=\"lg\" className=\"bg-light rounded-lg\">\r\n                                <Button color=\"link\" className=\"text-decoration-none text-muted pr-1\" type=\"button\">\r\n                                    <i className=\"ri-search-line search-icon font-size-18\"></i>\r\n                                </Button>\r\n                                <Input type=\"text\" className=\"form-control bg-light \" placeholder='Поиск пользователей...' />\r\n                            </InputGroup>\r\n                        </div>\r\n                        {/* End search-box */}\r\n                    </div>\r\n                    {/* end p-4 */}\r\n\r\n                    {/* Start contact lists */}\r\n                    <SimpleBar style={{ maxHeight: \"100%\" }} id=\"chat-room\" className=\"p-4 chat-message-list chat-group-list\">\r\n\r\n                        {\r\n                            sortedContacts.map((contact, key) =>\r\n                                <div key={key} className={key + 1 === 1 ? \"\" : \"mt-3\"}>\r\n                                    <div className=\"p-3 fw-bold text-primary\">\r\n                                        {contact.group}\r\n                                    </div>\r\n\r\n                                    <ul className=\"list-unstyled contact-list\">\r\n                                        {\r\n                                            contact.children.map((child, key) =>\r\n                                                <li key={key} >\r\n                                                    <div className=\"d-flex align-items-center\">\r\n                                                        <div className=\"flex-1\">\r\n                                                            <h5 className=\"font-size-14 m-0\">{child.displayName}</h5>\r\n                                                        </div>\r\n                                                        <UncontrolledDropdown>\r\n                                                            <DropdownToggle tag=\"a\" className=\"text-muted\">\r\n                                                                <i className=\"ri-more-2-fill\"></i>\r\n                                                            </DropdownToggle>\r\n                                                            <DropdownMenu className=\"dropdown-menu-end\">\r\n                                                                <DropdownItem>Написать <i className=\"ri-share-line float-end text-muted\"></i></DropdownItem>\r\n                                                                {/*<DropdownItem>{t('Block')} <i className=\"ri-forbid-line float-end text-muted\"></i></DropdownItem>*/}\r\n                                                                <DropdownItem>Удалить <i className=\"ri-delete-bin-line float-end text-muted\"></i></DropdownItem>\r\n                                                            </DropdownMenu>\r\n                                                        </UncontrolledDropdown>\r\n                                                    </div>\r\n                                                </li>\r\n                                            )\r\n                                        }\r\n                                    </ul>\r\n                                </div>\r\n                            )\r\n                        }\r\n\r\n                    </SimpleBar>\r\n                    {/* end contact lists */}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { contacts } = state.Chat;\r\n    return { contacts };\r\n};\r\n\r\nexport default connect(mapStateToProps, null)(withTranslation()(Contacts));","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\Tabs\\Chats.js",["300","301"],"import React, { Component } from 'react';\r\nimport { Input, InputGroup } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {connect, useDispatch} from \"react-redux\";\r\n\r\n//simplebar\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\n//actions\r\nimport {setconversationNameInOpenChat, activeUser, showChat, hideChat} from \"../../../redux/actions\"\r\n\r\n//components\r\nimport OnlineUsers from \"./OnlineUsers\";\r\nimport {SHOW_CHAT} from \"../../../redux/chat/constants\";\r\nimport firebase from \"firebase\";\r\nimport {getFirebaseBackend} from \"../../../helpers/firebase\";\r\n\r\nclass Chats extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchChat: \"\",\r\n            recentChatList: this.props.recentChatList\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.openUserChat = this.openUserChat.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        // var li = document.getElementById(\"conversation\" + this.props.active_user);\r\n        // if (li) {\r\n        //     li.classList.add(\"active\");\r\n        // }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps !== this.props) {\r\n            this.setState({\r\n                recentChatList: this.props.recentChatList\r\n            });\r\n        }\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps) {\r\n        if (this.props.recentChatList !== nextProps.recentChatList) {\r\n            this.setState({\r\n                recentChatList: nextProps.recentChatList,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleChange(e) {\r\n        this.setState({ searchChat: e.target.value });\r\n        var search = e.target.value;\r\n        let conversation = this.state.recentChatList;\r\n        let filteredArray = [];\r\n\r\n        //find conversation name from array\r\n        for (let i = 0; i < conversation.length; i++) {\r\n            if (conversation[i].name.toLowerCase().includes(search) || conversation[i].name.toUpperCase().includes(search))\r\n                filteredArray.push(conversation[i]);\r\n        }\r\n\r\n        //set filtered items to state\r\n        this.setState({ recentChatList: filteredArray })\r\n\r\n        //if input value is blanck then assign whole recent chatlist to array\r\n        if (search === \"\") this.setState({ recentChatList: this.props.recentChatList })\r\n    }\r\n\r\n    async openUserChat(e, chat) {\r\n\r\n        e.preventDefault();\r\n\r\n        //find index of current chat in array\r\n        var index = this.props.recentChatList.indexOf(chat);\r\n\r\n        // set activeUser \r\n        this.props.activeUser(index);\r\n\r\n        var chatList = document.getElementById(\"chat-list\");\r\n        var clickedItem = e.target;\r\n        var currentli = null;\r\n\r\n        if (chatList) {\r\n            var li = chatList.getElementsByTagName(\"li\");\r\n            //remove coversation user\r\n            for (var i = 0; i < li.length; ++i) {\r\n                if (li[i].classList.contains('active')) {\r\n                    li[i].classList.remove('active');\r\n                }\r\n            }\r\n            //find clicked coversation user\r\n            for (var k = 0; k < li.length; ++k) {\r\n                if (li[k].contains(clickedItem)) {\r\n                    currentli = li[k];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        //activation of clicked coversation user\r\n        if (currentli) {\r\n            currentli.classList.add('active');\r\n            currentli.classList.remove('unread');\r\n        }\r\n\r\n        this.props.showChat();\r\n        var userChat = document.getElementsByClassName(\"user-chat\");\r\n        if (this.props.displayChat) {\r\n            userChat[0].classList.add(\"user-chat-show\");\r\n        }\r\n\r\n        const db = firebase.firestore()\r\n        const authUser = getFirebaseBackend().getAuthenticatedUser()\r\n        const response = db.collection('users').doc(authUser.email)\r\n        const data = await response.get()\r\n        const chats = data.data().chats\r\n        chats[this.props.active_user].unRead = 0;\r\n\r\n        await response.update({\r\n            'chats': chats\r\n        })\r\n\r\n        //removes unread badge if user clicks\r\n        var unread = document.getElementById(\"unRead\" + chat.id);\r\n        if (unread) {\r\n            unread.style.display = \"none\";\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <div>\r\n                    <div className=\"px-4 pt-4\">\r\n                        <h4 className=\"mb-4\">Сообщения</h4>\r\n                        <div className=\"search-box chat-search-box\">\r\n                            <InputGroup size=\"lg\" className=\"mb-3 rounded-lg\">\r\n                                <span className=\"input-group-text text-muted bg-light pe-1 ps-3\" id=\"basic-addon1\">\r\n                                    <i className=\"ri-search-line search-icon font-size-18\"></i>\r\n                                </span>\r\n                                <Input type=\"text\" value={this.state.searchChat} onChange={(e) => this.handleChange(e)} className=\"form-control bg-light\" placeholder=\"Поиск сообщений или пользователей\" />\r\n                            </InputGroup>\r\n                        </div>\r\n                        {/* Search Box */}\r\n                    </div>\r\n\r\n                    {/* online users */}\r\n                    <OnlineUsers />\r\n\r\n                    {/* Start chat-message-list  */}\r\n                    <div className=\"px-2\">\r\n                        <h5 className=\"mb-3 px-3 font-size-16\">Недавние</h5>\r\n                        <SimpleBar style={{ maxHeight: \"100%\" }} className=\"chat-message-list\">\r\n\r\n                            <ul className=\"list-unstyled chat-list chat-user-list\" id=\"chat-list\">\r\n                                {\r\n                                    this.state.recentChatList.map((chat, key) =>\r\n                                        <li key={key} id={\"conversation\" + key} className={chat.unRead ? \"unread\" : chat.isTyping ? \"typing\" : (this.props.displayChat === true && key === this.props.active_user) ? \"active\" : \"\"}>\r\n                                            <Link to=\"#\" onClick={(e) => this.openUserChat(e, chat)}>\r\n                                                <div className=\"d-flex\">\r\n                                                    {\r\n                                                        chat.profilePicture === \"Null\" ?\r\n                                                            <div className={\"chat-user-img \" + chat.status + \" align-self-center me-3 ms-0\"}>\r\n                                                                <div className=\"avatar-xs\">\r\n                                                                    <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\">\r\n                                                                        {chat.name.charAt(0)}\r\n                                                                    </span>\r\n                                                                </div>\r\n                                                                {\r\n                                                                    chat.status && <span className=\"user-status\"></span>\r\n                                                                }\r\n                                                            </div>\r\n                                                            :\r\n                                                            <div className={\"chat-user-img \" + chat.status + \" align-self-center me-3 ms-0\"}>\r\n                                                                <img src={chat.profilePicture} className=\"rounded-circle avatar-xs\" alt=\"chatvia\" />\r\n                                                                {\r\n                                                                    chat.status && <span className=\"user-status\"></span>\r\n                                                                }\r\n                                                            </div>\r\n                                                    }\r\n\r\n                                                    <div className=\"flex-1 overflow-hidden\">\r\n                                                        <h5 className=\"text-truncate font-size-15 mb-1\">{chat.name === '' ? \"Аноним\" : chat.name}</h5>\r\n                                                        <p className=\"chat-user-message text-truncate mb-0\">\r\n                                                            {\r\n                                                                chat.isTyping ?\r\n                                                                    <>\r\n                                                                        Печатает<span className=\"animate-typing\">\r\n                                                                            <span className=\"dot ms-1\"></span>\r\n                                                                            <span className=\"dot ms-1\"></span>\r\n                                                                            <span className=\"dot ms-1\"></span>\r\n                                                                        </span>\r\n                                                                    </>\r\n                                                                    :\r\n                                                                    <>\r\n                                                                        {\r\n                                                                            chat.messages && (chat.messages.length > 0 && chat.messages[(chat.messages).length - 1].isImageMessage === true) ? <i className=\"ri-image-fill align-middle me-1\"></i> : null\r\n                                                                        }\r\n                                                                        {\r\n                                                                            chat.messages && (chat.messages.length > 0 && chat.messages[(chat.messages).length - 1].isFileMessage === true) ? <i className=\"ri-file-text-fill align-middle me-1\"></i> : null\r\n                                                                        }\r\n                                                                        {chat.messages && chat.messages.length > 0 ? chat.messages[(chat.messages).length - 1].message : null}\r\n                                                                    </>\r\n                                                            }\r\n\r\n\r\n\r\n                                                        </p>\r\n                                                    </div>\r\n                                                    <div className=\"font-size-11\">{chat.messages && chat.messages.length > 0 ? chat.messages[(chat.messages).length - 1].time : null}</div>\r\n                                                    {chat.unRead === 0 ? null :\r\n                                                        <div className=\"unread-message\" id={\"unRead\" + chat.id}>\r\n                                                            <span className=\"badge badge-soft-danger rounded-pill\">{chat.messages && chat.messages.length > 0 ? chat.unRead >= 20 ? chat.unRead + \"+\" : chat.unRead : \"\"}</span>\r\n                                                        </div>\r\n                                                    }\r\n                                                </div>\r\n                                            </Link>\r\n                                        </li>\r\n                                    )\r\n                                }\r\n                            </ul>\r\n                        </SimpleBar>\r\n\r\n                    </div>\r\n                    {/* End chat-message-list */}\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    const { active_user } = state.Chat;\r\n    const { displayChat } = state.Chat;\r\n    return { active_user, displayChat };\r\n};\r\n\r\nexport default connect(mapStateToProps, { setconversationNameInOpenChat, activeUser, showChat, hideChat})(Chats);","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\Tabs\\Settings.js",["302","303","304","305"],"import React, { useState } from 'react';\r\nimport { Dropdown, DropdownMenu, DropdownItem, DropdownToggle, Card, Button, UncontrolledDropdown, Input, Label } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport SimpleBar from \"simplebar-react\";\r\n\r\n//Import components\r\nimport CustomCollapse from \"../../../components/CustomCollapse\";\r\n\r\n//Import Images\r\nimport avatar1 from \"../../../assets/images/users/avatar-1.jpg\";\r\n\r\n//i18n\r\nimport { useTranslation } from 'react-i18next';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport MyInput from \"../../../components/MyInput\";\r\nimport firebase from \"firebase\";\r\nimport {getFirebaseBackend} from \"../../../helpers/firebase\";\r\nimport {setLoggedInUser} from \"../../../helpers/authUtils\";\r\nimport {refreshProfile, refreshtProfile} from \"../../../redux/auth/actions\";\r\n\r\nfunction Settings(props) {\r\n    const [dropdownOpen, setDropdownOpen] = useState(false);\r\n    const [isOpen1, setIsOpen1] = useState(true);\r\n    const [isOpen2, setIsOpen2] = useState(false);\r\n    const [isOpen3, setIsOpen3] = useState(false);\r\n    const [isOpen4, setIsOpen4] = useState(false);\r\n\r\n    const profile = useSelector(state => state.Auth.user)\r\n\r\n    const [name, setName] = useState(profile.displayName)\r\n    const [email, setEmail] = useState(profile.email)\r\n    const [location, setLocation] = useState(profile.location)\r\n\r\n    /* intilize t variable for multi language implementation */\r\n    const { t } = useTranslation();\r\n\r\n    const toggleCollapse1 = () => {\r\n        setIsOpen1(!isOpen1);\r\n        setIsOpen2(false);\r\n        setIsOpen3(false);\r\n        setIsOpen4(false);\r\n    };\r\n\r\n    const toggleCollapse2 = () => {\r\n        setIsOpen2(!isOpen2);\r\n        setIsOpen1(false);\r\n        setIsOpen3(false);\r\n        setIsOpen4(false);\r\n    };\r\n\r\n    const toggleCollapse3 = () => {\r\n        setIsOpen3(!isOpen3);\r\n        setIsOpen1(false);\r\n        setIsOpen2(false);\r\n        setIsOpen4(false);\r\n    };\r\n\r\n    const toggleCollapse4 = () => {\r\n        setIsOpen4(!isOpen4);\r\n        setIsOpen1(false);\r\n        setIsOpen3(false);\r\n        setIsOpen2(false);\r\n    };\r\n\r\n    const toggle = () => setDropdownOpen(!dropdownOpen);\r\n\r\n    const dispatch = useDispatch()\r\n    const db = firebase.firestore()\r\n    const authUser = getFirebaseBackend().getAuthenticatedUser()\r\n\r\n    const editProfile = async(e) => {\r\n\r\n        e.preventDefault()\r\n\r\n        const response = db.collection('users').doc(authUser.email)\r\n\r\n        if (profile.email !== email && email.trim() !== \"\")\r\n        {\r\n            firebase.auth().currentUser.updateEmail(email).then( () => {\r\n                console.log(\"email обновлен\")\r\n                response.update({\r\n                    'profile.email': email\r\n                })\r\n                authUser.email = email\r\n\r\n            }).catch((err) => {\r\n                console.error(err)\r\n                setEmail(profile.email)\r\n            })\r\n        }\r\n        else\r\n            setEmail(profile.email)\r\n\r\n        if (profile.name !== name && name.trim() !== \"\")\r\n        {\r\n            if (profile.name !== \"Аноним\") {\r\n                response.update({\r\n                    'profile.displayName': name\r\n                }).then(() => {\r\n                    console.log(\"Имя обновлено\")\r\n                }).catch((e) => {\r\n                    console.error(e)\r\n                    setName(profile.name)\r\n                })\r\n            }\r\n        }\r\n        else\r\n            setName(profile.name)\r\n\r\n        if (profile.location !== location && location.trim() !== \"\")\r\n        {\r\n            await response.update({\r\n                'profile.location': location\r\n            })\r\n        }\r\n        else\r\n            setLocation(profile.location)\r\n\r\n        const newUserData = {...authUser, displayName: name, location: location}\r\n        dispatch(refreshProfile(newUserData))\r\n        localStorage.setItem('authUser', JSON.stringify(newUserData));\r\n\r\n    }\r\n\r\n    const uploadAvatar = async(e) => {\r\n\r\n        let input = document.createElement('input')\r\n        input.type='file'\r\n        input.accept='image/*'\r\n        let avatar = null;\r\n\r\n        input.onchange = async(evt) => {\r\n            if (evt.target.files.length !== 0)\r\n            {\r\n                avatar = evt.target.files[0]\r\n                if (['image/jpeg', 'image/jpg', 'image/png'].includes(avatar.type))\r\n                {\r\n                    const storageRef = firebase.storage().ref()\r\n                    const avatarRef = storageRef.child('avatars/' + avatar.name)\r\n                    await avatarRef.put(avatar)\r\n                    const avatarURL = await avatarRef.getDownloadURL()\r\n\r\n                    const db = firebase.firestore();\r\n                    const authUser = getFirebaseBackend().getAuthenticatedUser();\r\n\r\n                    const authUserDoc = db.collection('users').doc(authUser.email)\r\n                    await authUserDoc.update({\r\n                        'profile.photoURL': avatarURL\r\n                    })\r\n\r\n                    const newUserData = {...authUser, photoURL: avatarURL}\r\n                    dispatch(refreshProfile(newUserData))\r\n                    localStorage.setItem('authUser', JSON.stringify(newUserData));\r\n                }\r\n            }\r\n        }\r\n        input.click()\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <div>\r\n                <div className=\"px-4 pt-4\">\r\n                    <h4 className=\"mb-0\">Настройки</h4>\r\n                </div>\r\n\r\n                <div className=\"text-center border-bottom p-4\">\r\n                    <div className=\"mb-4 profile-user\">\r\n                        {\r\n                            profile.photoURL ?\r\n                              <img src={profile.photoURL} className=\"rounded-circle avatar-lg\"\r\n                                   alt=\"chatvia\"/>\r\n                              :\r\n                              <div className=\"avatar-md rounded-circle img-thumbnail\">\r\n                                <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\"\r\n                                      style={{fontSize: '150%'}}>\r\n                                    {profile.displayName.charAt(0)}\r\n                                </span>\r\n                              </div>\r\n                        }\r\n                            <Button type=\"button\" color=\"light\" className=\"avatar-xs p-0 rounded-circle profile-photo-edit\" onClick={(e) => uploadAvatar(e)}>\r\n                                <i className=\"ri-pencil-fill\"></i>\r\n                            </Button>\r\n                    </div>\r\n\r\n                    <h5 className=\"font-size-16 mb-1 text-truncate\">{profile.displayName}</h5>\r\n                    <Dropdown isOpen={dropdownOpen} toggle={toggle} className=\"d-inline-block mb-1\">\r\n                        <DropdownToggle tag=\"a\" className=\"text-muted pb-1 d-block\" >\r\n                            {profile.status} <i className=\"mdi mdi-chevron-down\"></i>\r\n                        </DropdownToggle>\r\n\r\n                        <DropdownMenu>\r\n                            <DropdownItem>Онлайн</DropdownItem>\r\n                            <DropdownItem>Занят</DropdownItem>\r\n                        </DropdownMenu>\r\n                    </Dropdown>\r\n                </div>\r\n                {/* End profile user */}\r\n\r\n                {/* Start User profile description */}\r\n                <SimpleBar style={{ maxHeight: \"100%\" }} className=\"p-4 user-profile-desc\">\r\n\r\n                    <div id=\"profile-setting-accordion\" className=\"custom-accordion\">\r\n                        <Card className=\"shadow-none border mb-2\">\r\n                            <CustomCollapse\r\n                                title=\"Персональная информация\"\r\n                                isOpen={isOpen1}\r\n                                toggleCollapse={toggleCollapse1}\r\n                            >\r\n\r\n                                <div className=\"float-end\">\r\n                                    <Button color=\"light\" size=\"sm\" type=\"button\" onClick={(e) => editProfile(e)}><i className=\"ri-edit-fill me-1 align-middle\"></i>Ред.</Button>\r\n                                </div>\r\n\r\n                                <div>\r\n                                    <p className=\"text-muted mb-1\">Имя</p>\r\n                                    {/*<h5 className=\"font-size-14\" contentEditable={true} onChange={(e) => console.log(e.target)}>{name}</h5>*/}\r\n                                    <MyInput value={name} onChange={(e) => setName(e.target.value)}/>\r\n                                </div>\r\n\r\n                                <div className=\"mt-4\">\r\n                                    <p className=\"text-muted mb-1\">Email</p>\r\n                                    {/*<h5 className=\"font-size-14\">{email}</h5>*/}\r\n                                    <MyInput value={email} onChange={(e) => setEmail(e.target.value)} disabled/>\r\n                                </div>\r\n\r\n                                {/*<div className=\"mt-4\">*/}\r\n                                {/*    <p className=\"text-muted mb-1\">{t('Time')}</p>*/}\r\n                                {/*    <h5 className=\"font-size-14\">{t('11:40 AM')}</h5>*/}\r\n                                {/*</div>*/}\r\n\r\n                                <div className=\"mt-4\">\r\n                                    <p className=\"text-muted mb-1\">Расположение</p>\r\n                                    {/*<h5 className=\"font-size-14 mb-0\">{location}</h5>*/}\r\n                                    <MyInput value={location} onChange={(e) => setLocation(e.target.value)}/>\r\n                                </div>\r\n                            </CustomCollapse>\r\n                        </Card>\r\n                        {/* end profile card */}\r\n\r\n                        <Card className=\"shadow-none border mb-2\">\r\n                            <CustomCollapse\r\n                                title=\"Приватность\"\r\n                                isOpen={isOpen2}\r\n                                toggleCollapse={toggleCollapse2}\r\n                            >\r\n\r\n                                <div className=\"py-3\">\r\n                                    <div className=\"d-flex align-items-center\">\r\n                                        <div className=\"flex-1 overflow-hidden\">\r\n                                            <h5 className=\"font-size-13 mb-0 text-truncate\">Фото профиля</h5>\r\n                                        </div>\r\n                                        <UncontrolledDropdown className=\"ms-2\">\r\n                                            <DropdownToggle className=\"btn btn-light btn-sm w-sm\" tag=\"button\">\r\n                                                Каждому <i className=\"mdi mdi-chevron-down\"></i>\r\n                                            </DropdownToggle>\r\n                                            <DropdownMenu right>\r\n                                                <DropdownItem>Каждому</DropdownItem>\r\n                                                <DropdownItem>Выбранным</DropdownItem>\r\n                                                <DropdownItem>Никому</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </UncontrolledDropdown>\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"py-3 border-top\">\r\n                                    <div className=\"d-flex align-items-center\">\r\n                                        <div className=\"flex-1 overflow-hidden\">\r\n                                            <h5 className=\"font-size-13 mb-0 text-truncate\">Последний раз онлайн</h5>\r\n\r\n                                        </div>\r\n                                        <div className=\"ms-2\">\r\n                                            <div className=\"form-check form-switch\">\r\n                                                <Input type=\"checkbox\" className=\"form-check-input\" id=\"privacy-lastseenSwitch\" defaultChecked />\r\n                                                <Label className=\"form-check-label\" htmlFor=\"privacy-lastseenSwitch\"></Label>\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <div className=\"py-3 border-top\">\r\n                                    <div className=\"d-flex align-items-center\">\r\n                                        <div className=\"flex-1 overflow-hidden\">\r\n                                            <h5 className=\"font-size-13 mb-0 text-truncate\">Статус</h5>\r\n\r\n                                        </div>\r\n                                        <UncontrolledDropdown className=\"ms-2\">\r\n                                            <DropdownToggle className=\"btn btn-light btn-sm w-sm\" tag=\"button\">\r\n                                                Каждому <i className=\"mdi mdi-chevron-down\"></i>\r\n                                            </DropdownToggle>\r\n                                            <DropdownMenu right>\r\n                                                <DropdownItem>Каждому</DropdownItem>\r\n                                                <DropdownItem>Выбранным</DropdownItem>\r\n                                                <DropdownItem>Никому</DropdownItem>\r\n                                            </DropdownMenu>\r\n                                        </UncontrolledDropdown>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                {/*<div className=\"py-3 border-top\">*/}\r\n                                {/*    <div className=\"d-flex align-items-center\">*/}\r\n                                {/*        <div className=\"flex-1 overflow-hidden\">*/}\r\n                                {/*            <h5 className=\"font-size-13 mb-0 text-truncate\">{t('Read receipts')}</h5>*/}\r\n\r\n                                {/*        </div>*/}\r\n                                {/*        <div className=\"ms-2\">*/}\r\n                                {/*            <div className=\"form-check form-switch\">*/}\r\n                                {/*                <Input type=\"checkbox\" className=\"form-check-input\" id=\"privacy-readreceiptSwitch\" defaultChecked />*/}\r\n                                {/*                <Label className=\"form-check-label\" htmlFor=\"privacy-readreceiptSwitch\"></Label>*/}\r\n                                {/*            </div>*/}\r\n                                {/*        </div>*/}\r\n                                {/*    </div>*/}\r\n                                {/*</div>*/}\r\n\r\n                                {/*<div className=\"py-3 border-top\">*/}\r\n                                {/*    <div className=\"d-flex align-items-center\">*/}\r\n                                {/*        <div className=\"flex-1 overflow-hidden\">*/}\r\n                                {/*            <h5 className=\"font-size-13 mb-0 text-truncate\">{t('Groups')}</h5>*/}\r\n\r\n                                {/*        </div>*/}\r\n                                {/*        <UncontrolledDropdown className=\"ms-2\">*/}\r\n                                {/*            <DropdownToggle className=\"btn btn-light btn-sm w-sm\" tag=\"button\">*/}\r\n                                {/*                {t('Everyone')} <i className=\"mdi mdi-chevron-down\"></i>*/}\r\n                                {/*            </DropdownToggle>*/}\r\n                                {/*            <DropdownMenu right>*/}\r\n                                {/*                <DropdownItem>{t('Everyone')}</DropdownItem>*/}\r\n                                {/*                <DropdownItem>{t('selected')}</DropdownItem>*/}\r\n                                {/*                <DropdownItem>{t('Nobody')}</DropdownItem>*/}\r\n                                {/*            </DropdownMenu>*/}\r\n                                {/*        </UncontrolledDropdown>*/}\r\n                                {/*    </div>*/}\r\n                                {/*</div>*/}\r\n                            </CustomCollapse>\r\n                        </Card>\r\n                        {/* end Privacy card */}\r\n\r\n                        {/*<Card className=\"accordion-item border mb-2\">*/}\r\n                        {/*    <CustomCollapse*/}\r\n                        {/*        title=\"Безопасность\"*/}\r\n                        {/*        isOpen={isOpen3}*/}\r\n                        {/*        toggleCollapse={toggleCollapse3}*/}\r\n                        {/*    >*/}\r\n\r\n                        {/*        <div>*/}\r\n                        {/*            <div className=\"d-flex align-items-center\">*/}\r\n                        {/*                <div className=\"flex-1 overflow-hidden\">*/}\r\n                        {/*                    <h5 className=\"font-size-13 mb-0 text-truncate\">{t('Show security notification')}</h5>*/}\r\n\r\n                        {/*                </div>*/}\r\n                        {/*                <div className=\"ms-2 me-0\">*/}\r\n                        {/*                    <div className=\"form-check form-switch\">*/}\r\n                        {/*                        <Input type=\"checkbox\" className=\"form-check-input\" id=\"security-notificationswitch\" />*/}\r\n                        {/*                        <Label className=\"form-check-label\" htmlFor=\"security-notificationswitch\"></Label>*/}\r\n                        {/*                    </div>*/}\r\n                        {/*                </div>*/}\r\n                        {/*            </div>*/}\r\n                        {/*        </div>*/}\r\n                        {/*    </CustomCollapse>*/}\r\n                        {/*</Card>*/}\r\n                        {/* end Security card */}\r\n\r\n                        <Card className=\"shadow-none border mb-2\">\r\n                            <CustomCollapse\r\n                                title=\"Помощь\"\r\n                                isOpen={isOpen4}\r\n                                toggleCollapse={toggleCollapse4}\r\n                            >\r\n\r\n                                <div>\r\n                                    <div className=\"py-3\">\r\n                                        <h5 className=\"font-size-13 mb-0\"><Link to=\"#\" className=\"text-body d-block\">{t('FAQs')}</Link></h5>\r\n                                    </div>\r\n                                    <div className=\"py-3 border-top\">\r\n                                        <h5 className=\"font-size-13 mb-0\"><Link to=\"#\" className=\"text-body d-block\">Контакты</Link></h5>\r\n                                    </div>\r\n                                    <div className=\"py-3 border-top\">\r\n                                        <h5 className=\"font-size-13 mb-0\"><Link to=\"#\" className=\"text-body d-block\">GitHub</Link></h5>\r\n                                    </div>\r\n                                </div>\r\n                            </CustomCollapse>\r\n                        </Card>\r\n                        {/* end Help card */}\r\n                    </div>\r\n                    {/* end profile-setting-accordion */}\r\n                </SimpleBar>\r\n                {/* End User profile description */}\r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Settings;","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\UserChat\\ImageList.js",["306","307","308"],"import React, { useState } from 'react';\r\nimport { DropdownMenu, DropdownItem, DropdownToggle, UncontrolledDropdown } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n\r\n//i18n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\n//lightbox\r\nimport Lightbox from 'react-image-lightbox';\r\nimport 'react-image-lightbox/style.css';\r\n\r\nfunction ImageList(props) {\r\n    const [isOpen, setisOpen] = useState(false);\r\n    const [currentImage, setcurrentImage] = useState(null);\r\n    const [images] = useState(props.images);\r\n\r\n    /* intilize t variable for multi language implementation */\r\n    const { t } = useTranslation();\r\n\r\n    const toggleLightbox = (currentImage) => {\r\n        setisOpen(!isOpen);\r\n        setcurrentImage(currentImage);\r\n    }\r\n\r\n    const createBlob = (image) => {\r\n        const blob = new Blob(\r\n          [image.image],\r\n          {type: 'image/*'}\r\n        )\r\n        return URL.createObjectURL(blob)\r\n    }\r\n\r\n    const getImageNameFromURl = (url) => {\r\n        const urlWithOutParams = url.split('messages%2F')[1]\r\n        return urlWithOutParams.split('?')[0]\r\n    }\r\n\r\n    const downloadImage = (e, imgMsg) => {\r\n\r\n        e.preventDefault()\r\n\r\n        let xhr = new XMLHttpRequest()\r\n        xhr.responseType = 'blob'\r\n        let blob = null;\r\n        xhr.onload = event => {\r\n            try {\r\n                blob = xhr.response\r\n                let a = document.createElement('a')\r\n                let url = window.URL.createObjectURL(blob)\r\n                a.href = url\r\n                a.download = getImageNameFromURl(imgMsg.image) ?? \"Image.jpg\"\r\n                a.click()\r\n                window.URL.revokeObjectURL(url)\r\n            }\r\n            catch (e)\r\n            {\r\n                console.log(e)\r\n            }\r\n        }\r\n        xhr.open(\"GET\", 'https://api.allorigins.win/get?url=' + imgMsg.image.trim())\r\n        xhr.send()\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ul className=\"list-inline message-img  mb-0\">\r\n                {/* image list */}\r\n                {\r\n                    images.map((imgMsg, key) =>\r\n                    <li key={key} className=\"list-inline-item message-img-list\">\r\n                                                            <div>\r\n                                                                <Link to=\"#\" onClick={() => toggleLightbox(imgMsg.image)} className=\"popup-img d-inline-block m-1\" title=\"Project 1\">\r\n                                                                    <img src={imgMsg.image} alt=\"chat\" className=\"rounded border\" />\r\n                                                                </Link>\r\n                                                            </div>\r\n                                                            <div className=\"message-img-link\">\r\n                                                                <ul className=\"list-inline mb-0\">\r\n                                                                    <li className=\"list-inline-item\">\r\n                                                                        <Link to={imgMsg.image} download onClick={(e) => downloadImage(e, imgMsg)}>\r\n                                                                            <i className=\"ri-download-2-line\">\r\n\r\n                                                                            </i>\r\n                                                                        </Link>\r\n                                                                    </li>\r\n                                                                    <UncontrolledDropdown tag=\"li\" className=\"list-inline-item\">\r\n                                                                    {/*<DropdownToggle tag=\"a\">*/}\r\n                                                                    {/*    <i className=\"ri-more-fill\"></i>*/}\r\n                                                                    {/*</DropdownToggle>*/}\r\n                                                                    <DropdownMenu>\r\n                                                                        {/*<DropdownItem>{t('Copy')} <i className=\"ri-file-copy-line float-end text-muted\"></i></DropdownItem>*/}\r\n                                                                        {/*<DropdownItem>{t('Save')} <i className=\"ri-save-line float-end text-muted\"></i></DropdownItem>*/}\r\n                                                                        {/*<DropdownItem>{t('Forward')} <i className=\"ri-chat-forward-line float-end text-muted\"></i></DropdownItem>*/}\r\n                                                                        <DropdownItem>Удалить <i className=\"ri-delete-bin-line float-end text-muted\"></i></DropdownItem>\r\n                                                                    </DropdownMenu>\r\n                                                                    </UncontrolledDropdown>\r\n                                                                </ul>\r\n                                                            </div>\r\n                                                        </li>\r\n                    )\r\n                }\r\n\r\n                                                                {isOpen && (\r\n                                                                    <Lightbox\r\n                                                                        mainSrc={currentImage}\r\n                                                                        onCloseRequest={toggleLightbox}\r\n                                                                        imageTitle='Изображение'\r\n                                                                    />\r\n                                                                )}\r\n                                                        \r\n            </ul>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default ImageList;","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\UserChat\\UserHead.js",[],["309","310"],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\UserChat\\ChatInput.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\UserChat\\FileList.js",["311","312"],"import React from 'react';\r\nimport { Card, UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//i18n\r\nimport { useTranslation } from 'react-i18next';\r\n\r\nfunction FileList(props) {\r\n\r\n    /* intilize t variable for multi language implementation */\r\n    const { t } = useTranslation();\r\n\r\n    const downloadFile = (e, fileMsg) => {\r\n        e.preventDefault()\r\n\r\n        let xhr = new XMLHttpRequest()\r\n        xhr.responseType = 'blob'\r\n        let blob = null;\r\n        xhr.onload = event => {\r\n            blob = xhr.response\r\n            let a = document.createElement('a')\r\n            let url = window.URL.createObjectURL(blob)\r\n            a.href = fileMsg.fileURL\r\n            a.download = fileMsg.fileName ?? \"withOutName\"\r\n            a.click()\r\n            window.URL.revokeObjectURL(url)\r\n        }\r\n        xhr.open(\"GET\", 'https://api.allorigins.win/get?url=' + fileMsg.fileURL)\r\n        xhr.send()\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Card className=\"p-2 mb-2\">\r\n                <div className=\"d-flex align-items-center\">\r\n                    <div className=\"avatar-sm me-3 ms-0\">\r\n                        <div className=\"avatar-title bg-soft-primary text-primary rounded font-size-20\">\r\n                            <i className=\"ri-file-text-fill\"></i>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex-1\">\r\n                        <div className=\"text-start\">\r\n                            <h5 className=\"font-size-14 mb-1\">{props.fileName}</h5>\r\n                            <p className=\"text-muted font-size-13 mb-0\">{props.fileSize} Мб</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"ms-4\">\r\n                        <ul className=\"list-inline mb-0 font-size-20\">\r\n                            <li className=\"list-inline-item\">\r\n                                <Link to={props.fileURL} download onClick={e => downloadFile(e, {fileName: props.fileName, fileURL: props.fileURL})} className=\"text-muted\">\r\n                                    <i className=\"ri-download-2-line\">\r\n\r\n                                    </i>\r\n                                </Link>\r\n                            </li>\r\n                            <UncontrolledDropdown tag=\"li\" className=\"list-inline-item\">\r\n                                {/*<DropdownToggle tag=\"a\" className=\"dropdown-toggle text-muted\">*/}\r\n                                {/*    <i className=\"ri-more-fill\"></i>*/}\r\n                                {/*</DropdownToggle>*/}\r\n                                <DropdownMenu right>\r\n                                    {/*<DropdownItem>{t('Share')} <i className=\"ri-share-line float-end text-muted\"></i></DropdownItem>*/}\r\n                                    <DropdownItem>Удалить <i className=\"ri-delete-bin-line float-end text-muted\"></i></DropdownItem>\r\n                                </DropdownMenu>\r\n                            </UncontrolledDropdown>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default FileList;","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\components\\UserProfileSidebar.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\components\\SelectContact.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\components\\CustomCollapse.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\dashboard\\Tabs\\OnlineUsers.js",["313","314","315","316"],"import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\n//carousel\r\nimport AliceCarousel from 'react-alice-carousel'\r\nimport 'react-alice-carousel/lib/alice-carousel.css'\r\n\r\n//Import Images\r\nimport avatar2 from \"../../../assets/images/users/avatar-2.jpg\";\r\nimport avatar4 from \"../../../assets/images/users/avatar-4.jpg\";\r\nimport avatar5 from \"../../../assets/images/users/avatar-5.jpg\";\r\nimport avatar6 from \"../../../assets/images/users/avatar-6.jpg\";\r\n\r\nimport {useSelector} from \"react-redux\";\r\n\r\nfunction OnlineUsers(props) {\r\n    const responsive = {\r\n        0: { items: 4 },\r\n        1024: { items: 4 },\r\n    }\r\n\r\n    const users = useSelector(state => state.Chat.users)\r\n    const onlineUsers = users.filter(user => user.status === 'online')\r\n    return (\r\n        <React.Fragment>\r\n            {/* Start user status */}\r\n            <div className=\"px-4 pb-4 dot_remove\" dir=\"ltr\" >\r\n                <AliceCarousel\r\n                    responsive={responsive}\r\n                    disableDotsControls={false}\r\n                    disableButtonsControls={false}\r\n                    mouseTracking\r\n                >\r\n                    {\r\n                        onlineUsers.map(user =>\r\n                          <div className=\"item\">\r\n                              <Link to=\"#\" className=\"user-status-box\">\r\n                                  <div className=\"avatar-xs mx-auto d-block chat-user-img online\">\r\n                                      {user.profilePicture === 'Null' ?\r\n                                        <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\">{user.name[0]}</span> :\r\n                                            <img src={user.profilePicture} alt=\"user-img\" className=\"rounded-circle img-fluid\"/>}\r\n                                      <span className=\"user-status\">\r\n\r\n                                      </span>\r\n                                  </div>\r\n\r\n                                  <h5 className=\"font-size-13 text-truncate mt-3 mb-1\">{user.name}</h5>\r\n                              </Link>\r\n                          </div>\r\n                        )\r\n                    }\r\n                    {/*<div className=\"item\">*/}\r\n                    {/*    <Link to=\"#\" className=\"user-status-box\">*/}\r\n                    {/*        <div className=\"avatar-xs mx-auto d-block chat-user-img online\">*/}\r\n                    {/*            <img src={avatar4} alt=\"user-img\" className=\"img-fluid rounded-circle\" />*/}\r\n                    {/*            <span className=\"user-status\"></span>*/}\r\n                    {/*        </div>*/}\r\n\r\n                    {/*        <h5 className=\"font-size-13 text-truncate mt-3 mb-1\">Doris</h5>*/}\r\n                    {/*    </Link>*/}\r\n                    {/*</div>*/}\r\n\r\n                    {/*<div className=\"item\">*/}\r\n                    {/*    <Link to=\"#\" className=\"user-status-box\">*/}\r\n                    {/*        <div className=\"avatar-xs mx-auto d-block chat-user-img online\">*/}\r\n                    {/*            <img src={avatar5} alt=\"user-img\" className=\"img-fluid rounded-circle\" />*/}\r\n                    {/*            <span className=\"user-status\"></span>*/}\r\n                    {/*        </div>*/}\r\n\r\n                    {/*        <h5 className=\"font-size-13 text-truncate mt-3 mb-1\">Emily</h5>*/}\r\n                    {/*    </Link>*/}\r\n                    {/*</div>*/}\r\n\r\n                    {/*<div className=\"item\">*/}\r\n                    {/*    <Link to=\"#\" className=\"user-status-box\">*/}\r\n                    {/*        <div className=\"avatar-xs mx-auto d-block chat-user-img online\">*/}\r\n                    {/*            <img src={avatar6} alt=\"user-img\" className=\"img-fluid rounded-circle\" />*/}\r\n                    {/*            <span className=\"user-status\"></span>*/}\r\n                    {/*        </div>*/}\r\n\r\n                    {/*        <h5 className=\"font-size-13 text-truncate mt-3 mb-1\">Steve</h5>*/}\r\n                    {/*    </Link>*/}\r\n                    {/*</div>*/}\r\n\r\n\r\n                    {/*<div className=\"item\">*/}\r\n                    {/*    <Link to=\"#\" className=\"user-status-box\">*/}\r\n                    {/*        <div className=\"avatar-xs mx-auto d-block chat-user-img online\">*/}\r\n                    {/*            <span className=\"avatar-title rounded-circle bg-soft-primary text-primary\">*/}\r\n                    {/*                T*/}\r\n                    {/*                                </span>*/}\r\n                    {/*            <span className=\"user-status\"></span>*/}\r\n                    {/*        </div>*/}\r\n\r\n                    {/*        <h5 className=\"font-size-13 text-truncate mt-3 mb-1\">Teresa</h5>*/}\r\n                    {/*    </Link>*/}\r\n                    {/*</div>*/}\r\n                </AliceCarousel>\r\n                {/* end user status carousel */}\r\n            </div>\r\n            {/* end user status  */}\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default OnlineUsers;","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\components\\AttachedFiles.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\WelcomePage.js",["317"],"import React from 'react'\r\n\r\nimport '../assets/css/mycss/index.css';\r\nimport '../assets/css/mycss/welcome.css';\r\n\r\nimport logo from '../assets/images/myimg/Логотип.svg'\r\nimport mainImage from '../assets/images/myimg/Подростки.png'\r\nimport orange from '../assets/images/myimg/orange.png'\r\n\r\nconst WelcomePage = () => {\r\n\r\n  document.title = \"Orange | Добро пожаловать!\"\r\n    return (\r\n        <main className='welcome-page'>\r\n            <header className='welcome-header'>\r\n                <a href='/welcome'><img src={logo} alt=\"Лого\"/></a>\r\n                <nav>\r\n                    <a href=\"/login\">Войти</a>\r\n                    <a href=\"/registration\">Регистрация</a>\r\n                    <a href=\"#\">Подробнее о нас</a>\r\n                </nav>\r\n            </header>\r\n            <section>\r\n                <h1>Пусть все будет под рукой!</h1>\r\n                <p>\r\n                  <b>Orange</b> - это корпоративный мессенджер, который не покажется скучным!\r\n                  С нами <b>работа</b> будет удобней, проще и эффективней.\r\n                </p>\r\n                <a href=\"/registration\">Регистрация</a>\r\n            </section>\r\n            <img className='main-image' src={mainImage} alt=\"Подростки\"/>\r\n            <div className=\"bg-images\">\r\n                <img className='orange-img' src={orange} alt=\"\"/>\r\n                <img className='orange-img' src={orange} alt=\"\"/>\r\n            </div>\r\n        </main>\r\n    )\r\n};\r\n\r\nexport default WelcomePage\r\n","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\RegPage.js",["318"],"import React, {useEffect, useState} from 'react'\r\n\r\nimport '../assets/css/mycss/index.css';\r\nimport '../assets/css/mycss/reg.css';\r\n\r\nimport logo from '../assets/images/myimg/Логотип.svg'\r\nimport cat from '../assets/images/myimg/cat.png'\r\nimport orange from \"../assets/images/myimg/orange.png\";\r\n\r\nimport MyInput from \"../components/MyInput\";\r\n\r\nimport {registerUser, apiError} from \"../redux/auth/actions\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst RegPage = () => {\r\n\r\n  document.title = 'Orange | Регистрация'\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const errors = {\r\n    login: {\r\n      voidInput: \"Пустое поле\",\r\n      withoutError: \"Введите ваш email\",\r\n      loginExist: \"Такая почта уже зарегестрирована\",\r\n      permissionError: \"Вы не можете зарегестрироваться\"\r\n    }\r\n  }\r\n\r\n  const clearError = () => {\r\n    dispatch(apiError(\"\"));\r\n  }\r\n\r\n  useEffect(clearError)\r\n\r\n  const [loginText, setLoginText] = useState('')\r\n  const [passwordText, setPasswordText] = useState('')\r\n  const [passwordRepeatText, setPasswordRepeatText] = useState('')\r\n\r\n  const [loginError, setLoginError] = useState(errors.login.withoutError)\r\n  const [passwordError, setPasswordError] = useState(false)\r\n  const [passwordRepeatError, setPasswordRepeatError] = useState(false)\r\n\r\n  const sendForm = (e) => {\r\n    e.preventDefault()\r\n\r\n    setLoginText(loginText.trim())\r\n    setPasswordText(passwordText.trim())\r\n    setPasswordRepeatText(passwordRepeatText.trim())\r\n\r\n    setLoginError(errors.login.withoutError)\r\n    setPasswordError(false)\r\n    setPasswordRepeatError(false)\r\n\r\n    if (loginText.length < 1) {\r\n      setLoginError(errors.login.voidInput)\r\n      return\r\n    }\r\n\r\n    if (passwordText !== passwordRepeatText) {\r\n      setPasswordRepeatError(true)\r\n      return\r\n    }\r\n\r\n    if (passwordText.length < 8) {\r\n      setPasswordError(true)\r\n      return\r\n    }\r\n\r\n    if (loginError === errors.login.withoutError && !passwordError && !passwordRepeatError)\r\n    {\r\n      dispatch(registerUser({email: loginText, password: passwordText}))\r\n    }\r\n  }\r\n  const error = useSelector(state => state.Auth.error);\r\n\r\n  if (error === \"You haven't permission to register account.\") {\r\n    setLoginError(errors.login.permissionError)\r\n    clearError()\r\n  }\r\n\r\n\r\n    return (\r\n        <main className='reg-page'>\r\n          <section>\r\n            <a href='/welcome'><img src={logo} alt=\"Лого\"/></a>\r\n            <span>\r\n              <h1>Добро пожаловать в Orange!</h1>\r\n              <a href=\"/login\">Уже есть аккаунт?</a>\r\n            </span>\r\n              <div className='reg-form'>\r\n                <h2>Регистрация</h2>\r\n                <form>\r\n                  <MyInput value={loginText} onChange={(e) => setLoginText(e.target.value)} id='login' label='Email'\r\n                           variant='outlined'\r\n                           helperText={loginError}\r\n                           error={loginError !== errors.login.withoutError}\r\n                           onClick={() => setLoginError(errors.login.withoutError)}\r\n                           autoFocus\r\n                  />\r\n                  <MyInput value={passwordText} onChange={(e) => setPasswordText(e.target.value)} id='password'\r\n                           label='Пароль' variant='outlined'\r\n                           helperText='Пароль, минимум 8 символов'\r\n                           type='password'\r\n                           error={passwordError}\r\n                           onClick={() => setPasswordError(false)}\r\n                  />\r\n                  <MyInput value={passwordRepeatText} onChange={(e) => setPasswordRepeatText(e.target.value)}\r\n                           id='password-repeat' label='Повтор пароля' variant='outlined'\r\n                           helperText={passwordRepeatError ? 'Пароли не совпадают' : 'Пожалуйста, повторите пароль'}\r\n                           type='password' error={passwordRepeatError}\r\n                           onClick={() => setPasswordRepeatError(false)}\r\n                  />\r\n                  <button onClick={(e) => sendForm(e)}>Зарегестрироваться</button>\r\n                </form>\r\n              </div>\r\n          </section>\r\n        <div className=\"bg-images-reg\">\r\n          <img className='orange-img-o' src={orange} alt=\"\"/>\r\n          <img className='orange-img-o' src={orange} alt=\"\"/>\r\n          <img className='orange-img-o' src={orange} alt=\"\"/>\r\n          <img className='orange-img-o' src={orange} alt=\"\"/>\r\n          <img className='orange-img-o' src={cat} alt=\"\"/>\r\n        </div>\r\n        </main>\r\n    )\r\n}\r\n\r\nexport default RegPage","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\pages\\AuthPage.js",["319","320","321"],"import React, {useState} from 'react'\r\n\r\nimport logo from \"../assets/images/myimg/Логотип.svg\"\r\nimport smile from '../assets/images/myimg/smile.png'\r\nimport orange from '../assets/images/myimg/orange.png'\r\nimport simpson from '../assets/images/myimg/simpson.png'\r\n\r\nimport '../assets/css/mycss/index.css'\r\nimport '../assets/css/mycss/auth.css'\r\n\r\nimport MyInput from \"../components/MyInput\"\r\n\r\nimport {loginUser, apiError} from \"../redux/auth/actions\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nconst AuthPage = (props) => {\r\n  document.title = 'Orange | Авторизация'\r\n\r\n  const [loginText, setLoginText] = useState('')\r\n  const [passwordText, setPasswordText] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const sendForm = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    setLoginText(loginText.trim())\r\n    setLoginText(passwordText.trim())\r\n\r\n    dispatch(loginUser(loginText, passwordText, props.history))\r\n\r\n    if (localStorage.getItem(\"authUser\")) {\r\n      return <Redirect to=\"/dashboard\" />;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <main className='auth-page'>\r\n      <section>\r\n        <a href='/welcome'><img src={logo} alt=\"Лого\"/></a>\r\n        <span className='header-text'>\r\n            <h1>Рады видеть вас снова!<img src={smile}/></h1>\r\n            <span>Если вы впервые у нас, то приглашаем на <a href='/registration'>регистрацию</a></span>\r\n        </span>\r\n        <div className=\"auth-form\">\r\n          <h2>Авторизация</h2>\r\n          <form>\r\n            <MyInput id='login' label='Email' helperText='Ваш email' variant='outlined' autoFocus\r\n              onChange={ e => setLoginText(e.target.value)}\r\n            />\r\n            <MyInput id='password' label='Пароль' helperText='Ваш пароль' variant='outlined'\r\n              type='password'\r\n              onChange={ e => setPasswordText(e.target.value) }\r\n            />\r\n            <button onClick={(evt) => sendForm(evt)}>Войти</button>\r\n          </form>\r\n        </div>\r\n      </section>\r\n      <div className=\"bg-images-auth\">\r\n        <img className='orange-img-o' src={orange} alt=\"\"/>\r\n        <img className='orange-img-o' src={orange} alt=\"\"/>\r\n        <img className='orange-img-o' src={orange} alt=\"\"/>\r\n        <img className='orange-img-o' src={orange} alt=\"\"/>\r\n        <img className='orange-img-o' src={simpson} alt=\"\"/>\r\n      </div>\r\n    </main>\r\n  )\r\n}\r\n\r\nexport default AuthPage","C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\components\\MyInput.js",[],"C:\\Users\\lhawick\\Desktop\\Template\\Chatvia_react_v2.0.0\\Chatvia\\src\\redux\\chat\\saga.js",["322","323"],"import { all, call, fork, put, takeEvery } from 'redux-saga/effects';\r\nimport {FORGET_PASSWORD} from \"../auth/constants\";\r\nimport {ADD_NEW_CHAT_USER} from \"./constants\";\r\nimport firebase from \"firebase\";\r\nimport {getFirebaseBackend} from \"../../helpers/firebase\";\r\n\r\nfunction* addNewChatUser({payload}) {\r\n\r\n  const db = yield call(firebase.firestore);\r\n  const authUser = getFirebaseBackend().getAuthenticatedUser();\r\n  const doc = db.collection('users').doc(authUser.email)\r\n  const receiver = db.collection('users').doc(payload.email)\r\n\r\n  yield call(async () => await doc.update({\r\n    'chats': firebase.firestore.FieldValue.arrayUnion(payload)\r\n  }))\r\n\r\n  const currentUser = {\r\n    email: authUser.email,\r\n    name: authUser.displayName,\r\n    profilePicture: authUser.photoURL,\r\n    status: authUser.status,\r\n    unRead: 0,\r\n    isGroup: false,\r\n    location: authUser.location,\r\n    messages: []\r\n  }\r\n\r\n  yield call(async() => await receiver.update({\r\n    'chats': firebase.firestore.FieldValue.arrayUnion(currentUser)\r\n  }))\r\n}\r\n\r\nexport function* watchAddNewChatUser() {\r\n  yield takeEvery(ADD_NEW_CHAT_USER, addNewChatUser);\r\n}\r\n\r\nfunction* chatSaga() {\r\n  yield all([\r\n    fork(watchAddNewChatUser)\r\n  ])\r\n}\r\n\r\nexport default chatSaga;",{"ruleId":"324","replacedBy":"325"},{"ruleId":"326","replacedBy":"327"},{"ruleId":"324","replacedBy":"328"},{"ruleId":"326","replacedBy":"329"},{"ruleId":"330","severity":1,"message":"331","line":4,"column":8,"nodeType":"332","messageId":"333","endLine":4,"endColumn":16},{"ruleId":"330","severity":1,"message":"334","line":5,"column":9,"nodeType":"332","messageId":"333","endLine":5,"endColumn":27},{"ruleId":"330","severity":1,"message":"335","line":2,"column":20,"nodeType":"332","messageId":"333","endLine":2,"endColumn":24},{"ruleId":"330","severity":1,"message":"336","line":10,"column":7,"nodeType":"332","messageId":"333","endLine":10,"endColumn":12},{"ruleId":"330","severity":1,"message":"337","line":13,"column":7,"nodeType":"332","messageId":"333","endLine":13,"endColumn":15},{"ruleId":"330","severity":1,"message":"338","line":10,"column":24,"nodeType":"332","messageId":"333","endLine":10,"endColumn":35},{"ruleId":"330","severity":1,"message":"339","line":15,"column":8,"nodeType":"332","messageId":"333","endLine":15,"endColumn":15},{"ruleId":"330","severity":1,"message":"340","line":16,"column":8,"nodeType":"332","messageId":"333","endLine":16,"endColumn":15},{"ruleId":"330","severity":1,"message":"341","line":17,"column":8,"nodeType":"332","messageId":"333","endLine":17,"endColumn":15},{"ruleId":"330","severity":1,"message":"342","line":18,"column":8,"nodeType":"332","messageId":"333","endLine":18,"endColumn":15},{"ruleId":"330","severity":1,"message":"343","line":19,"column":8,"nodeType":"332","messageId":"333","endLine":19,"endColumn":15},{"ruleId":"330","severity":1,"message":"344","line":20,"column":8,"nodeType":"332","messageId":"333","endLine":20,"endColumn":15},{"ruleId":"330","severity":1,"message":"345","line":21,"column":8,"nodeType":"332","messageId":"333","endLine":21,"endColumn":12},{"ruleId":"330","severity":1,"message":"346","line":22,"column":8,"nodeType":"332","messageId":"333","endLine":22,"endColumn":12},{"ruleId":"330","severity":1,"message":"347","line":23,"column":8,"nodeType":"332","messageId":"333","endLine":23,"endColumn":12},{"ruleId":"330","severity":1,"message":"348","line":22,"column":9,"nodeType":"332","messageId":"333","endLine":22,"endColumn":15},{"ruleId":"330","severity":1,"message":"349","line":23,"column":9,"nodeType":"332","messageId":"333","endLine":23,"endColumn":16},{"ruleId":"350","severity":1,"message":"351","line":124,"column":17,"nodeType":"352","messageId":"353","endLine":124,"endColumn":68},{"ruleId":"330","severity":1,"message":"354","line":1,"column":16,"nodeType":"332","messageId":"333","endLine":1,"endColumn":25},{"ruleId":"330","severity":1,"message":"355","line":1,"column":38,"nodeType":"332","messageId":"333","endLine":1,"endColumn":46},{"ruleId":"330","severity":1,"message":"356","line":14,"column":9,"nodeType":"332","messageId":"333","endLine":14,"endColumn":19},{"ruleId":"330","severity":1,"message":"357","line":14,"column":21,"nodeType":"332","messageId":"333","endLine":14,"endColumn":31},{"ruleId":"330","severity":1,"message":"358","line":14,"column":33,"nodeType":"332","messageId":"333","endLine":14,"endColumn":48},{"ruleId":"330","severity":1,"message":"359","line":15,"column":9,"nodeType":"332","messageId":"333","endLine":15,"endColumn":13},{"ruleId":"330","severity":1,"message":"360","line":16,"column":9,"nodeType":"332","messageId":"333","endLine":16,"endColumn":20},{"ruleId":"330","severity":1,"message":"361","line":65,"column":11,"nodeType":"332","messageId":"333","endLine":65,"endColumn":21},{"ruleId":"362","severity":1,"message":"363","line":95,"column":8,"nodeType":"364","endLine":95,"endColumn":10,"suggestions":"365"},{"ruleId":"362","severity":1,"message":"366","line":97,"column":15,"nodeType":"367","endLine":113,"endColumn":6},{"ruleId":"362","severity":1,"message":"368","line":113,"column":8,"nodeType":"364","endLine":113,"endColumn":10,"suggestions":"369"},{"ruleId":"330","severity":1,"message":"370","line":1,"column":16,"nodeType":"332","messageId":"333","endLine":1,"endColumn":25},{"ruleId":"330","severity":1,"message":"371","line":7,"column":22,"nodeType":"332","messageId":"333","endLine":7,"endColumn":30},{"ruleId":"330","severity":1,"message":"372","line":24,"column":9,"nodeType":"332","messageId":"333","endLine":24,"endColumn":18},{"ruleId":"330","severity":1,"message":"340","line":21,"column":8,"nodeType":"332","messageId":"333","endLine":21,"endColumn":15},{"ruleId":"330","severity":1,"message":"373","line":39,"column":13,"nodeType":"332","messageId":"333","endLine":39,"endColumn":14},{"ruleId":"330","severity":1,"message":"370","line":1,"column":16,"nodeType":"332","messageId":"333","endLine":1,"endColumn":25},{"ruleId":"330","severity":1,"message":"374","line":9,"column":8,"nodeType":"332","messageId":"333","endLine":9,"endColumn":15},{"ruleId":"330","severity":1,"message":"358","line":13,"column":9,"nodeType":"332","messageId":"333","endLine":13,"endColumn":24},{"ruleId":"330","severity":1,"message":"375","line":14,"column":9,"nodeType":"332","messageId":"333","endLine":14,"endColumn":20},{"ruleId":"330","severity":1,"message":"331","line":15,"column":8,"nodeType":"332","messageId":"333","endLine":15,"endColumn":16},{"ruleId":"330","severity":1,"message":"334","line":16,"column":9,"nodeType":"332","messageId":"333","endLine":16,"endColumn":27},{"ruleId":"330","severity":1,"message":"376","line":17,"column":9,"nodeType":"332","messageId":"333","endLine":17,"endColumn":19},{"ruleId":"330","severity":1,"message":"373","line":27,"column":13,"nodeType":"332","messageId":"333","endLine":27,"endColumn":14},{"ruleId":"330","severity":1,"message":"377","line":2,"column":62,"nodeType":"332","messageId":"333","endLine":2,"endColumn":81},{"ruleId":"330","severity":1,"message":"378","line":14,"column":8,"nodeType":"332","messageId":"333","endLine":14,"endColumn":12},{"ruleId":"330","severity":1,"message":"358","line":17,"column":21,"nodeType":"332","messageId":"333","endLine":17,"endColumn":36},{"ruleId":"379","severity":1,"message":"380","line":244,"column":104,"nodeType":"381","messageId":"382","endLine":244,"endColumn":105},{"ruleId":"330","severity":1,"message":"331","line":8,"column":8,"nodeType":"332","messageId":"333","endLine":8,"endColumn":16},{"ruleId":"330","severity":1,"message":"373","line":74,"column":17,"nodeType":"332","messageId":"333","endLine":74,"endColumn":18},{"ruleId":"330","severity":1,"message":"375","line":4,"column":18,"nodeType":"332","messageId":"333","endLine":4,"endColumn":29},{"ruleId":"330","severity":1,"message":"383","line":14,"column":9,"nodeType":"332","messageId":"333","endLine":14,"endColumn":18},{"ruleId":"330","severity":1,"message":"374","line":11,"column":8,"nodeType":"332","messageId":"333","endLine":11,"endColumn":15},{"ruleId":"330","severity":1,"message":"384","line":19,"column":9,"nodeType":"332","messageId":"333","endLine":19,"endColumn":24},{"ruleId":"330","severity":1,"message":"385","line":20,"column":25,"nodeType":"332","messageId":"333","endLine":20,"endColumn":40},{"ruleId":"330","severity":1,"message":"386","line":52,"column":11,"nodeType":"332","messageId":"333","endLine":52,"endColumn":26},{"ruleId":"330","severity":1,"message":"387","line":2,"column":38,"nodeType":"332","messageId":"333","endLine":2,"endColumn":52},{"ruleId":"330","severity":1,"message":"373","line":19,"column":13,"nodeType":"332","messageId":"333","endLine":19,"endColumn":14},{"ruleId":"330","severity":1,"message":"388","line":26,"column":11,"nodeType":"332","messageId":"333","endLine":26,"endColumn":21},{"ruleId":"324","replacedBy":"389"},{"ruleId":"326","replacedBy":"390"},{"ruleId":"330","severity":1,"message":"387","line":2,"column":38,"nodeType":"332","messageId":"333","endLine":2,"endColumn":52},{"ruleId":"330","severity":1,"message":"373","line":11,"column":13,"nodeType":"332","messageId":"333","endLine":11,"endColumn":14},{"ruleId":"330","severity":1,"message":"339","line":9,"column":8,"nodeType":"332","messageId":"333","endLine":9,"endColumn":15},{"ruleId":"330","severity":1,"message":"340","line":10,"column":8,"nodeType":"332","messageId":"333","endLine":10,"endColumn":15},{"ruleId":"330","severity":1,"message":"391","line":11,"column":8,"nodeType":"332","messageId":"333","endLine":11,"endColumn":15},{"ruleId":"330","severity":1,"message":"342","line":12,"column":8,"nodeType":"332","messageId":"333","endLine":12,"endColumn":15},{"ruleId":"392","severity":1,"message":"393","line":20,"column":21,"nodeType":"394","endLine":20,"endColumn":33},{"ruleId":"330","severity":1,"message":"395","line":14,"column":9,"nodeType":"332","messageId":"333","endLine":14,"endColumn":17},{"ruleId":"330","severity":1,"message":"396","line":13,"column":20,"nodeType":"332","messageId":"333","endLine":13,"endColumn":28},{"ruleId":"330","severity":1,"message":"397","line":14,"column":22,"nodeType":"332","messageId":"333","endLine":14,"endColumn":33},{"ruleId":"398","severity":1,"message":"399","line":43,"column":39,"nodeType":"394","endLine":43,"endColumn":57},{"ruleId":"330","severity":1,"message":"400","line":1,"column":27,"nodeType":"332","messageId":"333","endLine":1,"endColumn":30},{"ruleId":"330","severity":1,"message":"401","line":2,"column":9,"nodeType":"332","messageId":"333","endLine":2,"endColumn":24},"no-native-reassign",["402"],"no-negated-in-lhs",["403"],["402"],["403"],"no-unused-vars","'firebase' is defined but never used.","Identifier","unusedVar","'getFirebaseBackend' is defined but never used.","'Link' is defined but never used.","'Login' is assigned a value but never used.","'Register' is assigned a value but never used.","'ADD_MESSAGE' is defined but never used.","'avatar2' is defined but never used.","'avatar4' is defined but never used.","'avatar3' is defined but never used.","'avatar6' is defined but never used.","'avatar7' is defined but never used.","'avatar8' is defined but never used.","'img6' is defined but never used.","'img4' is defined but never used.","'img7' is defined but never used.","'yellow' is defined but never used.","'replace' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","'Component' is defined but never used.","'useState' is defined but never used.","'activeUser' is defined but never used.","'addContact' is defined but never used.","'addLoggedinUser' is defined but never used.","'dark' is defined but never used.","'editProfile' is defined but never used.","'activeUser' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'db', 'dispatch', and 'userDoc'. Either include them or remove the dependency array.","ArrayExpression",["404"],"Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'authUser.email' and 'dispatch'. Either include them or remove the dependency array.",["405"],"'useEffect' is defined but never used.","'hideChat' is defined but never used.","'HIDE_CHAT' is defined but never used.","'t' is assigned a value but never used.","'avatar1' is defined but never used.","'useDispatch' is defined but never used.","'getProfile' is defined but never used.","'UncontrolledTooltip' is defined but never used.","'img1' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'SHOW_CHAT' is defined but never used.","'setLoggedInUser' is defined but never used.","'refreshtProfile' is defined but never used.","'toggleCollapse3' is assigned a value but never used.","'DropdownToggle' is defined but never used.","'createBlob' is assigned a value but never used.",["402"],["403"],"'avatar5' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'Redirect' is defined but never used.","'apiError' is defined but never used.","'useSelector' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'put' is defined but never used.","'FORGET_PASSWORD' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"406","fix":"407"},{"desc":"408","fix":"409"},"Update the dependencies array to be: [db, dispatch, userDoc]",{"range":"410","text":"411"},"Update the dependencies array to be: [authUser.email, dispatch]",{"range":"412","text":"413"},[3223,3225],"[db, dispatch, userDoc]",[3804,3806],"[authUser.email, dispatch]"]